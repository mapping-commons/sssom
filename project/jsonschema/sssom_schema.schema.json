{
    "$defs": {
        "EntityTypeEnum": {
            "description": "",
            "enum": [
                "owl class",
                "owl object property",
                "owl data property",
                "owl annotation property",
                "owl named individual",
                "skos concept",
                "rdfs resource",
                "rdfs class",
                "rdfs literal",
                "rdfs datatype",
                "rdf property",
                "composed entity expression"
            ],
            "title": "EntityTypeEnum",
            "type": "string"
        },
        "ExtensionDefinition": {
            "additionalProperties": false,
            "description": "A definition of an extension (non-standard) slot.",
            "properties": {
                "property": {
                    "description": "The property associated with the extension slot. It is intended to provide a non-ambiguous meaning to the slot (contrary to the slot_name, which for brevity reasons may be ambiguous).",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "slot_name": {
                    "description": "The name of the extension slot.",
                    "type": "string"
                },
                "type_hint": {
                    "description": "Expected type of the values of the extension slot.",
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "slot_name"
            ],
            "title": "ExtensionDefinition",
            "type": "object"
        },
        "Mapping": {
            "additionalProperties": false,
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "subject_type": {
                                "const": "rdfs literal"
                            }
                        },
                        "required": [
                            "subject_type"
                        ]
                    },
                    "then": {
                        "properties": {
                            "subject_label": {}
                        },
                        "required": [
                            "subject_label"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "subject_type": {
                                "not": {
                                    "anyOf": [
                                        {
                                            "const": "rdfs literal"
                                        }
                                    ]
                                }
                            }
                        },
                        "required": [
                            "subject_type"
                        ]
                    },
                    "then": {
                        "properties": {
                            "subject_id": {}
                        },
                        "required": [
                            "subject_id"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "object_type": {
                                "const": "rdfs literal"
                            }
                        },
                        "required": [
                            "object_type"
                        ]
                    },
                    "then": {
                        "properties": {
                            "object_label": {}
                        },
                        "required": [
                            "object_label"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "object_type": {
                                "not": {
                                    "anyOf": [
                                        {
                                            "const": "rdfs literal"
                                        }
                                    ]
                                }
                            }
                        },
                        "required": [
                            "object_type"
                        ]
                    },
                    "then": {
                        "properties": {
                            "object_id": {}
                        },
                        "required": [
                            "object_id"
                        ]
                    }
                }
            ],
            "description": "Represents an individual mapping between a pair of entities.",
            "properties": {
                "author_id": {
                    "description": "Identifies the persons or groups responsible for asserting the mappings. Recommended to be a list of ORCIDs or otherwise identifying URIs.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "author_label": {
                    "description": "A string representing the author of this mapping. This should only be used in the absence of a proper semantic identifier (which would be stored in author_id) for that author. It is not expected that there should be any link between author_id and author_label; in particular, author_label is not intended to provide a human-friendly version of an identifier in author_id.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "cardinality_scope": {
                    "description": "A list of mapping slots that define the scope for the value found in the mapping_cardinality slot. Mappings are considered to belong to the same scope if they have the same value for all slots listed in the scope. If no scope is defined, the default scope is empty, meaning that all mappings belong to a single scope that is identical to the entire mapping set. The behaviour if a value in the list does not correspond to a valid slot name is undefined.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "comment": {
                    "description": "Free text field containing either curator notes or text generated by tool providing additional informative information.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "confidence": {
                    "description": "A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence.",
                    "maximum": 1.0,
                    "minimum": 0.0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "creator_id": {
                    "description": "Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a list of ORCIDs or otherwise identifying URIs.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "creator_label": {
                    "description": "A string representing the creator of this mapping. This should only be used in the absence of a proper semantic identifier (which would be stored in creator_id) for that creator. It is not expected that there should be any link between creator_id and creator_label; in particular, creator_label is not intended to provide a human-friendly version of an identifier in creator_id.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "curation_rule": {
                    "description": "A curation rule is a (potentially) complex condition executed by an agent that led to the establishment of a mapping. Curation rules often involve complex domain-specific considerations, which are hard to capture in an automated fashion. The curation rule is captured as a resource rather than a string, which enables higher levels of transparency and sharing across mapping sets. The URI representation of the curation rule is expected to be a resolvable identifier which provides details about the nature of the curation rule.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "curation_rule_text": {
                    "description": "A curation rule is a (potentially) complex condition executed by an agent that led to the establishment of a mapping. Curation rules often involve complex domain-specific considerations, which are hard to capture in an automated fashion. The curation rule should be captured as a resource (entity reference) rather than a string (see curation_rule element), which enables higher levels of transparency and sharing across mapping sets. The textual representation of curation rule is intended to be used in cases where the creation of a resource is not practical from the perspective of the mapping_provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "issue_tracker_item": {
                    "description": "The issue tracker item discussing this mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "license": {
                    "description": "A url to the license of the mapping. In absence of a license we assume no license.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_cardinality": {
                    "$ref": "#/$defs/MappingCardinalityEnum",
                    "description": "A value indicating whether the subject (respectively object) of this mapping record is present in other records involving a different object (respectively subject), within the subset of records defined by the cardinality_scope slot (or within the entire mapping set if cardinality_scope is undefined). Note that this is a convenience field, whose values can always be derived from the mapping set."
                },
                "mapping_date": {
                    "description": "The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file.",
                    "format": "date",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_justification": {
                    "anyOf": [
                        {
                            "const": "semapv:LexicalMatching"
                        },
                        {
                            "const": "semapv:LogicalReasoning"
                        },
                        {
                            "const": "semapv:CompositeMatching"
                        },
                        {
                            "const": "semapv:UnspecifiedMatching"
                        },
                        {
                            "const": "semapv:SemanticSimilarityThresholdMatching"
                        },
                        {
                            "const": "semapv:LexicalSimilarityThresholdMatching"
                        },
                        {
                            "const": "semapv:MappingChaining"
                        },
                        {
                            "const": "semapv:MappingReview"
                        },
                        {
                            "const": "semapv:ManualMappingCuration"
                        },
                        {
                            "const": "semapv:MappingInversion"
                        },
                        {
                            "const": "semapv:StructuralMatching"
                        },
                        {
                            "const": "semapv:InstanceBasedMatching"
                        },
                        {
                            "const": "semapv:BackgroundKnowledgeBasedMatching"
                        }
                    ],
                    "description": "A mapping justification is an action (or the written representation of that action) of showing a mapping to be right or reasonable.",
                    "pattern": "^semapv:(MappingReview|ManualMappingCuration|LogicalReasoning|LexicalMatching|CompositeMatching|UnspecifiedMatching|SemanticSimilarityThresholdMatching|LexicalSimilarityThresholdMatching|MappingChaining|MappingInversion|StructuralMatching|InstanceBasedMatching|BackgroundKnowledgeBasedMatching)$",
                    "type": "string"
                },
                "mapping_provider": {
                    "description": "URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_source": {
                    "description": "The mapping set this mapping was originally defined in. mapping_source is used for example when merging multiple mapping sets or deriving one mapping set from another.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_tool": {
                    "description": "A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. Consider using the mapping_tool_id slot for a more standardised reference.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_tool_id": {
                    "description": "The ID (entity reference) of the tool or algorithm that was used to generate the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_tool_version": {
                    "description": "Version string that denotes the version of the mapping tool used.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "match_string": {
                    "description": "String that is shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "object_category": {
                    "description": "The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. This slot is deliberately underspecified. Conceptual categories can range from those that are found in general upper ontologies such as BFO (e.g. process, temporal region, etc) to those that serve as upper ontologies in specific domains, such as COB or BioLink (e.g. gene, disease, chemical entity). The purpose of this optional field is documentation for human reviewers - when a category is known and documented clearly, the cost of interpreting and evaluating the mapping decreases.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_id": {
                    "description": "The ID of the object of the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_label": {
                    "description": "The label of object of the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_match_field": {
                    "description": "A list of properties, annotations or attributes related to the object that was used to establish the match. This property is recommended for use in conjunction with  mapping justifications related to lexical matching, such as `semapv:LexicalMatching`.  For additional information see the 'See Also' section.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "object_preprocessing": {
                    "description": "Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "object_source": {
                    "description": "URI of vocabulary or identifier source for the object.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_source_version": {
                    "description": "Version IRI or version string of the source of the object term.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_type": {
                    "$ref": "#/$defs/EntityTypeEnum",
                    "description": "The type of entity that is being mapped."
                },
                "other": {
                    "description": "Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. NOTE. This field is not recommended for general use, and should be used sparingly. See https://github.com/mapping-commons/sssom/blob/master/examples/schema/extension-slots.sssom.tsv for an alternative approach based on extension slots.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "predicate_id": {
                    "description": "The ID of the predicate or relation that relates the subject and object of this match.",
                    "type": "string"
                },
                "predicate_label": {
                    "description": "The label of the predicate/relation of the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "predicate_modifier": {
                    "$ref": "#/$defs/PredicateModifierEnum",
                    "description": "A modifier for negating the predicate. See https://github.com/mapping-commons/sssom/issues/40 for discussion"
                },
                "predicate_type": {
                    "$ref": "#/$defs/EntityTypeEnum",
                    "description": "The type of the predicate used to map the subject and object entities."
                },
                "publication_date": {
                    "description": "The date the mapping was published. This is different from the date the mapping was asserted.",
                    "format": "date",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "record_id": {
                    "description": "A unique identifier for a mapping record, that is for an instance of the Mapping class (in the SSSOM/TSV serialisation, this corresponds to an individual row after propagation is applied). This slot is intended to uniquely identify one such record within a mapping set and may for example act as the resource identifier for the record when it is serialised into RDF. This slot MUST NOT be used to \u201cgroup\u201d several records together to indicate that they pertain to a single mapping (for example, that they represent different versions of the same mapping), by assigning the same ID to several records. When it is used, every record within a set MUST have a unique, non-empty value. The identifier MUST be a URI; beyond that, its format is unconstrained and the identifier MUST be treated as an opaque string.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "reviewer_id": {
                    "description": "Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a list of ORCIDs or otherwise identifying URIs.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "reviewer_label": {
                    "description": "A string representing the reviewer of this mapping. This should only be used in the absence of a proper semantic identifier (which would be stored in reviewer_id) for that reviewer. It is not expected that there should be any link between reviewer_id and reviewer_label; in particular, reviewer_label is not intended to provide a human-friendly version of an identifier in reviewer_id.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "see_also": {
                    "description": "A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "similarity_measure": {
                    "description": "The measure used for computing a similarity score. This field is meant to be used in conjunction with the similarity_score field, to document, for example, the lexical or semantic match of a matching algorithm. To make processing this field as unambiguous as possible, we recommend using wikidata CURIEs, but the type of this field is deliberately unspecified.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "similarity_score": {
                    "description": "A score between 0 and 1 to denote the similarity between two entities, where 1 denotes equivalence, and 0 denotes disjointness. The score is meant to be used in conjunction with the similarity_measure field, to document, for example, the lexical or semantic match of a matching algorithm.",
                    "maximum": 1.0,
                    "minimum": 0.0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "subject_category": {
                    "description": "The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. This slot is deliberately underspecified. Conceptual categories can range from those that are found in general upper ontologies such as BFO (e.g. process, temporal region, etc) to those that serve as upper ontologies in specific domains, such as COB or BioLink (e.g. gene, disease, chemical entity). The purpose of this optional field is documentation for human reviewers - when a category is known and documented clearly, the cost of interpreting and evaluating the mapping decreases.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_id": {
                    "description": "The ID of the subject of the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_label": {
                    "description": "The label of subject of the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_match_field": {
                    "description": "A list of properties, annotations or attributes related to the subject that was used to establish the match. This property is recommended for use in conjunction with  mapping justifications related to lexical matching, such as `semapv:LexicalMatching`.  For additional information see the 'See Also' section.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "subject_preprocessing": {
                    "description": "Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "subject_source": {
                    "description": "URI of vocabulary or identifier source for the subject.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_source_version": {
                    "description": "Version IRI or version string of the source of the subject term.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_type": {
                    "$ref": "#/$defs/EntityTypeEnum",
                    "description": "The type of entity that is being mapped."
                }
            },
            "required": [
                "predicate_id",
                "mapping_justification"
            ],
            "title": "Mapping",
            "type": "object"
        },
        "MappingCardinalityEnum": {
            "description": "",
            "enum": [
                "1:1",
                "1:n",
                "n:1",
                "n:n",
                "1:0",
                "0:1",
                "0:0"
            ],
            "title": "MappingCardinalityEnum",
            "type": "string"
        },
        "MappingRegistry": {
            "additionalProperties": false,
            "description": "A registry for managing mapping sets. It holds a set of mapping set references, and can import other registries.",
            "properties": {
                "documentation": {
                    "description": "A URL to the documentation of this mapping commons.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "homepage": {
                    "description": "A URL to a homepage of this mapping commons.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "imports": {
                    "description": "A list of registries that should be imported into this one.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "issue_tracker": {
                    "description": "A URL location of the issue tracker for this entity.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_registry_description": {
                    "description": "The description of a mapping registry.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_registry_id": {
                    "description": "The unique identifier of a mapping registry.",
                    "type": "string"
                },
                "mapping_registry_title": {
                    "description": "The title of a mapping registry.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_set_references": {
                    "description": "A list of mapping set references.",
                    "items": {
                        "$ref": "#/$defs/MappingSetReference"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                }
            },
            "required": [
                "mapping_registry_id"
            ],
            "title": "MappingRegistry",
            "type": "object"
        },
        "MappingSet": {
            "additionalProperties": false,
            "description": "Represents a set of mappings.",
            "properties": {
                "cardinality_scope": {
                    "description": "A list of mapping slots that define the scope for the value found in the mapping_cardinality slot. Mappings are considered to belong to the same scope if they have the same value for all slots listed in the scope. If no scope is defined, the default scope is empty, meaning that all mappings belong to a single scope that is identical to the entire mapping set. The behaviour if a value in the list does not correspond to a valid slot name is undefined.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "comment": {
                    "description": "Free text field containing either curator notes or text generated by tool providing additional informative information.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "creator_id": {
                    "description": "Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a list of ORCIDs or otherwise identifying URIs.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "creator_label": {
                    "description": "A string representing the creator of this mapping. This should only be used in the absence of a proper semantic identifier (which would be stored in creator_id) for that creator. It is not expected that there should be any link between creator_id and creator_label; in particular, creator_label is not intended to provide a human-friendly version of an identifier in creator_id.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "curation_rule": {
                    "description": "A curation rule is a (potentially) complex condition executed by an agent that led to the establishment of a mapping. Curation rules often involve complex domain-specific considerations, which are hard to capture in an automated fashion. The curation rule is captured as a resource rather than a string, which enables higher levels of transparency and sharing across mapping sets. The URI representation of the curation rule is expected to be a resolvable identifier which provides details about the nature of the curation rule.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "curation_rule_text": {
                    "description": "A curation rule is a (potentially) complex condition executed by an agent that led to the establishment of a mapping. Curation rules often involve complex domain-specific considerations, which are hard to capture in an automated fashion. The curation rule should be captured as a resource (entity reference) rather than a string (see curation_rule element), which enables higher levels of transparency and sharing across mapping sets. The textual representation of curation rule is intended to be used in cases where the creation of a resource is not practical from the perspective of the mapping_provider.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "curie_map": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/$defs/Prefix__identifier_optional"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "description": "A dictionary that contains prefixes as keys and their URI expansions as values.",
                    "type": [
                        "object",
                        "null"
                    ]
                },
                "extension_definitions": {
                    "description": "A list that defines the extension slots used in the mapping set.",
                    "items": {
                        "$ref": "#/$defs/ExtensionDefinition"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "issue_tracker": {
                    "description": "A URL location of the issue tracker for this entity.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "license": {
                    "description": "A url to the license of the mapping. In absence of a license we assume no license.",
                    "type": "string"
                },
                "mapping_date": {
                    "description": "The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file.",
                    "format": "date",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_provider": {
                    "description": "URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_set_confidence": {
                    "description": "Mapping-set level confidence is assigned by the creator of the mapping set, to indicate their overall confidence in the correctness of all mappings in the mapping set. Mapping set confidence is intended to be used in cases were the creator wants to express an overall confidence into the agent that curated the individual mappings, for example a lexical matching tool, or a group of students.",
                    "maximum": 1.0,
                    "minimum": 0.0,
                    "type": [
                        "number",
                        "null"
                    ]
                },
                "mapping_set_description": {
                    "description": "A description of the mapping set.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_set_id": {
                    "description": "A globally unique identifier for the mapping set (not each individual mapping). Should ideally be resolvable.",
                    "type": "string"
                },
                "mapping_set_source": {
                    "description": "A mapping set or set of mapping set that was used to derive the mapping set.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "mapping_set_title": {
                    "description": "The display name of a mapping set.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_set_version": {
                    "description": "A version string for the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_tool": {
                    "description": "A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. Consider using the mapping_tool_id slot for a more standardised reference.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_tool_id": {
                    "description": "The ID (entity reference) of the tool or algorithm that was used to generate the mapping.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_tool_version": {
                    "description": "Version string that denotes the version of the mapping tool used.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mappings": {
                    "description": "Contains a list of mapping objects.",
                    "items": {
                        "$ref": "#/$defs/Mapping"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "object_match_field": {
                    "description": "A list of properties, annotations or attributes related to the object that was used to establish the match. This property is recommended for use in conjunction with  mapping justifications related to lexical matching, such as `semapv:LexicalMatching`.  For additional information see the 'See Also' section.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "object_preprocessing": {
                    "description": "Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "object_source": {
                    "description": "URI of vocabulary or identifier source for the object.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_source_version": {
                    "description": "Version IRI or version string of the source of the object term.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "object_type": {
                    "$ref": "#/$defs/EntityTypeEnum",
                    "description": "The type of entity that is being mapped."
                },
                "other": {
                    "description": "Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. NOTE. This field is not recommended for general use, and should be used sparingly. See https://github.com/mapping-commons/sssom/blob/master/examples/schema/extension-slots.sssom.tsv for an alternative approach based on extension slots.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "predicate_type": {
                    "$ref": "#/$defs/EntityTypeEnum",
                    "description": "The type of the predicate used to map the subject and object entities."
                },
                "publication_date": {
                    "description": "The date the mapping was published. This is different from the date the mapping was asserted.",
                    "format": "date",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "see_also": {
                    "description": "A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "similarity_measure": {
                    "description": "The measure used for computing a similarity score. This field is meant to be used in conjunction with the similarity_score field, to document, for example, the lexical or semantic match of a matching algorithm. To make processing this field as unambiguous as possible, we recommend using wikidata CURIEs, but the type of this field is deliberately unspecified.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "sssom_version": {
                    "$ref": "#/$defs/SssomVersionEnum",
                    "description": "The version of the SSSOM specification a mapping set is compliant with."
                },
                "subject_match_field": {
                    "description": "A list of properties, annotations or attributes related to the subject that was used to establish the match. This property is recommended for use in conjunction with  mapping justifications related to lexical matching, such as `semapv:LexicalMatching`.  For additional information see the 'See Also' section.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "subject_preprocessing": {
                    "description": "Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "subject_source": {
                    "description": "URI of vocabulary or identifier source for the subject.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_source_version": {
                    "description": "Version IRI or version string of the source of the subject term.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "subject_type": {
                    "$ref": "#/$defs/EntityTypeEnum",
                    "description": "The type of entity that is being mapped."
                }
            },
            "required": [
                "mapping_set_id",
                "license"
            ],
            "title": "MappingSet",
            "type": "object"
        },
        "MappingSetReference": {
            "additionalProperties": false,
            "description": "A reference to a mapping set. It allows to augment mapping set metadata from the perspective of the registry, for example, providing confidence, or a local filename or a grouping.",
            "properties": {
                "last_updated": {
                    "description": "The date this reference was last updated.",
                    "format": "date",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "local_name": {
                    "description": "The local name assigned to file that corresponds to the downloaded mapping set.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_set_group": {
                    "description": "Set by the owners of the mapping registry. A way to group related mapping sets for example for UI purposes.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "mapping_set_id": {
                    "description": "A globally unique identifier for the mapping set (not each individual mapping). Should ideally be resolvable.",
                    "type": "string"
                },
                "mirror_from": {
                    "description": "A URL location from which to obtain a resource, such as a mapping set.",
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "registry_confidence": {
                    "description": "This value is set by the registry that indexes the mapping set. It reflects the confidence the registry has in the correctness of the mappings in the mapping set.",
                    "maximum": 1.0,
                    "minimum": 0.0,
                    "type": [
                        "number",
                        "null"
                    ]
                }
            },
            "required": [
                "mapping_set_id"
            ],
            "title": "MappingSetReference",
            "type": "object"
        },
        "NoTermFound": {
            "additionalProperties": false,
            "description": "sssom:NoTermFound can be used in place of a subject_id or object_id when the corresponding entity could not be found. It SHOULD be used in conjunction with a corresponding subject_source or object_source to signify where the term was not found.",
            "title": "NoTermFound",
            "type": "object"
        },
        "PredicateModifierEnum": {
            "description": "",
            "enum": [
                "Not"
            ],
            "title": "PredicateModifierEnum",
            "type": "string"
        },
        "Prefix": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "prefix_name": {
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "prefix_url": {
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [
                "prefix_name"
            ],
            "title": "Prefix",
            "type": "object"
        },
        "Prefix__identifier_optional": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "prefix_name": {
                    "type": [
                        "string",
                        "null"
                    ]
                },
                "prefix_url": {
                    "type": [
                        "string",
                        "null"
                    ]
                }
            },
            "required": [],
            "title": "Prefix",
            "type": "object"
        },
        "Propagatable": {
            "additionalProperties": false,
            "description": "Metamodel extension class to describe slots whose value can be propagated down from the MappingSet class to the Mapping class.",
            "properties": {
                "propagated": {
                    "description": "Indicates whether a slot can be propagated from a mapping down to individual mappings.",
                    "type": [
                        "boolean",
                        "null"
                    ]
                }
            },
            "title": "Propagatable",
            "type": "object"
        },
        "SssomVersionEnum": {
            "description": "",
            "enum": [
                "1.0",
                "1.1"
            ],
            "title": "SssomVersionEnum",
            "type": "string"
        },
        "Versionable": {
            "additionalProperties": false,
            "description": "Metamodel extension class to manage slots that may not exist in all versions of the model.",
            "properties": {
                "added_in": {
                    "$ref": "#/$defs/SssomVersionEnum",
                    "description": "The version of the specification in which the slot was added. If not specified, the slot must be assumed to have been added in version 1.0."
                }
            },
            "title": "Versionable",
            "type": "object"
        }
    },
    "$id": "https://w3id.org/sssom/schema/",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "additionalProperties": true,
    "metamodel_version": "1.7.0",
    "title": "sssom",
    "type": "object",
    "version": null
}