{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sssom schema Datamodel for Simple Standard for Sharing Ontology Mappings (SSSOM) Classes Mapping - Represents an individual mapping between a pair of entities MappingSet - Represents a set of mappings Mixins Slots author_id - Identifies the persons or groups responsible for asserting the mappings. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. author_label - A string identifying the author of this mapping. In the spirit of provenance, consider to use author_id instead. comment - Free text field containing either curator notes or text generated by tool providing additional informative information. confidence - A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence. creator_id - Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. creator_label - A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. equivalent_property - SSSOM property should be mapped to: license - A url to the license of the mapping. In absence of a license we assume no license. mapping set\u279elicense mapping_cardinality - A string indicating whether this mapping is from a 1:1 (the subject_id maps to a single object_id), 1:n (the subject maps to more than one object_id), n:1, 1:0, 0:1 or n:n group. Note that this is a convenience field that should be derivable from the mapping set. mapping_date - The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. mapping_provider - URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. mapping_set_description - A description of the mapping set. mapping_set_id - A globally unique identifier for the mapping set (not each individual mapping). Should be IRI, ideally resolvable. mapping_set_source - A mapping set or set of mapping set that was used to derive the mapping set. mapping_set_version - A version string for the mapping. mapping_tool - A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. mapping_tool_version - Version string that denotes the version of the mapping tool used. mappings - Contains a list of mapping objects match_string - Strings that are shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots. match_term_type - Specifies what type of terms are being matched (class, property, or individual). match_type - The kind of match that led to the mapping, e.g. Logical or Lexical. metadata_element - All legal SSSOM metadata elements are subproperties of this. object_category - The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. object_id - The ID of the object of the mapping. object_label - The label of object of the mapping object_match_field - A tuple of fields (term annotations on the object) that was used for the match. object_preprocessing - Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. object_source - IRI of ontology source for the object. Version IRI preferred. object_source_version - Version IRI or version string of the source of the object term. other - Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. predicate_id - The ID of the predicate or relation that relates the subject and object of this match. predicate_label - The label of the predicate/relation of the mapping predicate_modifier - A modifier for negating the prediate. See https://github.com/mapping-commons/sssom/issues/40 for discussion publication_date - The date the mapping was published. This is different from the date the mapping was asserted. rdf_example - An example value of the a SSSOM element in the TSV file. reviewer_id - Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. reviewer_label - A string identifying the reviewer of this mapping. In the spirit of provenance, consider to use author_id instead. scope - Indicates whether the metadata element has local, global or local-global scope. see_also - A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment semantic_similarity_measure - The measure used for computing the the semantic similarity score. To make processing this field as unambiguous as possible, we recommend using wikidata identifiers, but wikipedia pages could also be acceptable. semantic_similarity_score - A score between 0 and 1 to denote the semantic similarity, where 1 denotes equivalence. subject_category - The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. subject_id - The ID of the subject of the mapping. subject_label - The label of subject of the mapping subject_match_field - A tuple of fields (term annotations on the subject) that was used for the match. subject_preprocessing - Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. subject_source - URI of ontology source for the subject. subject_source_version - Version IRI or version string of the source of the subject term. tsv_example - An example value of the a SSSOM element in RDF. Enums mapping_cardinality_enum match_term_type_enum match_type_enum predicate_modifier_enum preprocessing_method_enum Subsets Types Built in Bool Decimal ElementIdentifier NCName NodeIdentifier URI URIorCURIE XSDDate XSDDateTime XSDTime float int str Defined EntityReference ( Uriorcurie ) - A reference to a mapped entity. This is represented internally as a string, and as a resource in RDF Boolean ( Bool ) - A binary (true or false) value Date ( XSDDate ) - a date (year, month and day) in an idealized calendar Datetime ( XSDDateTime ) - The combination of a date and time Decimal ( Decimal ) - A real number with arbitrary precision that conforms to the xsd:decimal specification Double ( float ) - A real number that conforms to the xsd:double specification Float ( float ) - A real number that conforms to the xsd:float specification Integer ( int ) - An integer Ncname ( NCName ) - Prefix part of CURIE Nodeidentifier ( NodeIdentifier ) - A URI, CURIE or BNODE that represents a node in a model. Objectidentifier ( ElementIdentifier ) - A URI or CURIE that represents an object in the model. String ( str ) - A character string Time ( XSDTime ) - A time object represents a (local) time of day, independent of any particular day Uri ( URI ) - a complete URI Uriorcurie ( URIorCURIE ) - a URI or a CURIE","title":"Index"},{"location":"#sssom-schema","text":"Datamodel for Simple Standard for Sharing Ontology Mappings (SSSOM)","title":"sssom schema"},{"location":"#classes","text":"Mapping - Represents an individual mapping between a pair of entities MappingSet - Represents a set of mappings","title":"Classes"},{"location":"#mixins","text":"","title":"Mixins"},{"location":"#slots","text":"author_id - Identifies the persons or groups responsible for asserting the mappings. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. author_label - A string identifying the author of this mapping. In the spirit of provenance, consider to use author_id instead. comment - Free text field containing either curator notes or text generated by tool providing additional informative information. confidence - A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence. creator_id - Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. creator_label - A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. equivalent_property - SSSOM property should be mapped to: license - A url to the license of the mapping. In absence of a license we assume no license. mapping set\u279elicense mapping_cardinality - A string indicating whether this mapping is from a 1:1 (the subject_id maps to a single object_id), 1:n (the subject maps to more than one object_id), n:1, 1:0, 0:1 or n:n group. Note that this is a convenience field that should be derivable from the mapping set. mapping_date - The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. mapping_provider - URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. mapping_set_description - A description of the mapping set. mapping_set_id - A globally unique identifier for the mapping set (not each individual mapping). Should be IRI, ideally resolvable. mapping_set_source - A mapping set or set of mapping set that was used to derive the mapping set. mapping_set_version - A version string for the mapping. mapping_tool - A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. mapping_tool_version - Version string that denotes the version of the mapping tool used. mappings - Contains a list of mapping objects match_string - Strings that are shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots. match_term_type - Specifies what type of terms are being matched (class, property, or individual). match_type - The kind of match that led to the mapping, e.g. Logical or Lexical. metadata_element - All legal SSSOM metadata elements are subproperties of this. object_category - The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. object_id - The ID of the object of the mapping. object_label - The label of object of the mapping object_match_field - A tuple of fields (term annotations on the object) that was used for the match. object_preprocessing - Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. object_source - IRI of ontology source for the object. Version IRI preferred. object_source_version - Version IRI or version string of the source of the object term. other - Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. predicate_id - The ID of the predicate or relation that relates the subject and object of this match. predicate_label - The label of the predicate/relation of the mapping predicate_modifier - A modifier for negating the prediate. See https://github.com/mapping-commons/sssom/issues/40 for discussion publication_date - The date the mapping was published. This is different from the date the mapping was asserted. rdf_example - An example value of the a SSSOM element in the TSV file. reviewer_id - Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. reviewer_label - A string identifying the reviewer of this mapping. In the spirit of provenance, consider to use author_id instead. scope - Indicates whether the metadata element has local, global or local-global scope. see_also - A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment semantic_similarity_measure - The measure used for computing the the semantic similarity score. To make processing this field as unambiguous as possible, we recommend using wikidata identifiers, but wikipedia pages could also be acceptable. semantic_similarity_score - A score between 0 and 1 to denote the semantic similarity, where 1 denotes equivalence. subject_category - The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. subject_id - The ID of the subject of the mapping. subject_label - The label of subject of the mapping subject_match_field - A tuple of fields (term annotations on the subject) that was used for the match. subject_preprocessing - Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. subject_source - URI of ontology source for the subject. subject_source_version - Version IRI or version string of the source of the subject term. tsv_example - An example value of the a SSSOM element in RDF.","title":"Slots"},{"location":"#enums","text":"mapping_cardinality_enum match_term_type_enum match_type_enum predicate_modifier_enum preprocessing_method_enum","title":"Enums"},{"location":"#subsets","text":"","title":"Subsets"},{"location":"#types","text":"","title":"Types"},{"location":"#built-in","text":"Bool Decimal ElementIdentifier NCName NodeIdentifier URI URIorCURIE XSDDate XSDDateTime XSDTime float int str","title":"Built in"},{"location":"#defined","text":"EntityReference ( Uriorcurie ) - A reference to a mapped entity. This is represented internally as a string, and as a resource in RDF Boolean ( Bool ) - A binary (true or false) value Date ( XSDDate ) - a date (year, month and day) in an idealized calendar Datetime ( XSDDateTime ) - The combination of a date and time Decimal ( Decimal ) - A real number with arbitrary precision that conforms to the xsd:decimal specification Double ( float ) - A real number that conforms to the xsd:double specification Float ( float ) - A real number that conforms to the xsd:float specification Integer ( int ) - An integer Ncname ( NCName ) - Prefix part of CURIE Nodeidentifier ( NodeIdentifier ) - A URI, CURIE or BNODE that represents a node in a model. Objectidentifier ( ElementIdentifier ) - A URI or CURIE that represents an object in the model. String ( str ) - A character string Time ( XSDTime ) - A time object represents a (local) time of day, independent of any particular day Uri ( URI ) - a complete URI Uriorcurie ( URIorCURIE ) - a URI or a CURIE","title":"Defined"},{"location":"Boolean/","text":"Type: boolean A binary (true or false) value URI: linkml:Boolean Root (builtin) type Bool Representation bool","title":"Type: boolean"},{"location":"Boolean/#type-boolean","text":"A binary (true or false) value URI: linkml:Boolean Root (builtin) type Bool Representation bool","title":"Type: boolean"},{"location":"Date/","text":"Type: date a date (year, month and day) in an idealized calendar URI: linkml:Date Root (builtin) type XSDDate Representation str","title":"Type: date"},{"location":"Date/#type-date","text":"a date (year, month and day) in an idealized calendar URI: linkml:Date Root (builtin) type XSDDate Representation str","title":"Type: date"},{"location":"Datetime/","text":"Type: datetime The combination of a date and time URI: linkml:Datetime Root (builtin) type XSDDateTime Representation str","title":"Type: datetime"},{"location":"Datetime/#type-datetime","text":"The combination of a date and time URI: linkml:Datetime Root (builtin) type XSDDateTime Representation str","title":"Type: datetime"},{"location":"Decimal/","text":"Type: decimal A real number with arbitrary precision that conforms to the xsd:decimal specification URI: linkml:Decimal Root (builtin) type Decimal","title":"Type: decimal"},{"location":"Decimal/#type-decimal","text":"A real number with arbitrary precision that conforms to the xsd:decimal specification URI: linkml:Decimal Root (builtin) type Decimal","title":"Type: decimal"},{"location":"Double/","text":"Type: double A real number that conforms to the xsd:double specification URI: linkml:Double Root (builtin) type float","title":"Type: double"},{"location":"Double/#type-double","text":"A real number that conforms to the xsd:double specification URI: linkml:Double Root (builtin) type float","title":"Type: double"},{"location":"EntityReference/","text":"Type: EntityReference A reference to a mapped entity. This is represented internally as a string, and as a resource in RDF URI: sssom:EntityReference Parent type Uriorcurie Root (builtin) type str Representation str","title":"Type: EntityReference"},{"location":"EntityReference/#type-entityreference","text":"A reference to a mapped entity. This is represented internally as a string, and as a resource in RDF URI: sssom:EntityReference Parent type Uriorcurie Root (builtin) type str Representation str","title":"Type: EntityReference"},{"location":"Float/","text":"Type: float A real number that conforms to the xsd:float specification URI: linkml:Float Root (builtin) type float","title":"Type: float"},{"location":"Float/#type-float","text":"A real number that conforms to the xsd:float specification URI: linkml:Float Root (builtin) type float","title":"Type: float"},{"location":"Integer/","text":"Type: integer An integer URI: linkml:Integer Root (builtin) type int","title":"Type: integer"},{"location":"Integer/#type-integer","text":"An integer URI: linkml:Integer Root (builtin) type int","title":"Type: integer"},{"location":"Mapping/","text":"Class: mapping Represents an individual mapping between a pair of entities URI: sssom:Mapping Referenced by Class None mappings 0..* Mapping Attributes Own subject_id 1..1 Description: The ID of the subject of the mapping. Range: EntityReference Example: HP:0009894 The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears' subject_label 0..1 Description: The label of subject of the mapping Range: String Example: Thickened ears None subject_category 0..1 Description: The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. Range: String Example: UBERON:0001062 (The CURIE of the Uberon term for \"anatomical entity\".) Example: biolink:Gene (The CURIE of the biolink class for genes.) predicate_id 1..1 Description: The ID of the predicate or relation that relates the subject and object of this match. Range: EntityReference Example: skos:exactMatch None predicate_label 0..1 Description: The label of the predicate/relation of the mapping Range: String Example: owl:sameAs The subject and the object are instances (owl individuals), and the two instances are the same. Example: owl:equivalentClass The subject and the object are classes (owl class), and the two classes are the same. Example: owl:equivalentProperty The subject and the object are properties (owl object, data, annotation properties), and the two properties are the same. Example: rdfs:subClassOf The subject and the object are classes (owl class), and the subject is a subclass of the object. Example: rdfs:subPropertyOf The subject and the object are properties (owl object, data, annotation properties), and the subject is a subproperty of the object. Example: skos:relatedMatch The subject and the object are associated in some unspecified way. Example: skos:closeMatch The subject and the object are sufficiently similar that they can be used interchangeably in some information retrieval applications. Example: skos:exactMatch The subject and the object can, with a high degree of confidence, be used interchangeably across a wide range of information retrieval applications. Example: skos:narrowMatch From the SKOS primer: A triple skos:narrower (and skos:narrowMatch) asserts that , the object of the triple, is a narrower concept than , the subject of the triple. Example: skos:broadMatch From the SKOS primer: A triple skos:broader (and skos:broadMatch) asserts that , the object of the triple, is a broader concept than , the subject of the triple. Example: oio:database_cross_reference Two terms are related in some way. The meaning is frequently consistent across a single set of mappings. Note this property is often overloaded even where the terms are of a different nature (e.g. interpro2go) Example: rdfs:seeAlso The subject and the object are associated in some unspecified way. The object IRI often resolves to a resource on the web that provides additional information. predicate_modifier 0..1 Description: A modifier for negating the prediate. See https://github.com/mapping-commons/sssom/issues/40 for discussion Range: predicate_modifier_enum Example: Not Negates the predicate, see documentation of predicate_modifier_enum object_id 1..1 Description: The ID of the object of the mapping. Range: EntityReference Example: HP:0009894 The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears' object_label 0..1 Description: The label of object of the mapping Range: String Example: Thickened ears None object_category 0..1 Description: The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. Range: String Example: UBERON:0001062 (The CURIE of the Uberon term for \"anatomical entity\".) Example: biolink:Gene (The CURIE of the biolink class for genes.) match_type 1..* Description: The kind of match that led to the mapping, e.g. Logical or Lexical. Range: match_type_enum Example: Lexical (The type of match that led to the mapping is Lexical, i.e. based on comparing the string representation of an aspect of the subject with the string representation of an aspect of the subject.) Example: HumanCurated (The type of match that led to the mapping was by human expert judgement.) author_id 0..* Description: Identifies the persons or groups responsible for asserting the mappings. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference author_label 0..* Description: A string identifying the author of this mapping. In the spirit of provenance, consider to use author_id instead. Range: String reviewer_id 0..* Description: Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference reviewer_label 0..* Description: A string identifying the reviewer of this mapping. In the spirit of provenance, consider to use author_id instead. Range: String creator_id 0..* Description: Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference creator_label 0..* Description: A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. Range: String license 0..1 Description: A url to the license of the mapping. In absence of a license we assume no license. Range: Uri subject_source 0..1 Description: URI of ontology source for the subject. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) subject_source_version 0..1 Description: Version IRI or version string of the source of the subject term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') object_source 0..1 Description: IRI of ontology source for the object. Version IRI preferred. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) object_source_version 0..1 Description: Version IRI or version string of the source of the object term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') mapping_provider 0..1 Description: URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. Range: Uri mapping_cardinality 0..1 Description: A string indicating whether this mapping is from a 1:1 (the subject_id maps to a single object_id), 1:n (the subject maps to more than one object_id), n:1, 1:0, 0:1 or n:n group. Note that this is a convenience field that should be derivable from the mapping set. Range: mapping_cardinality_enum mapping_tool 0..1 Description: A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. Range: String Example: https://github.com/AgreementMakerLight/AML-Project None mapping_tool_version 0..1 Description: Version string that denotes the version of the mapping tool used. Range: String Example: v3.2 None mapping_date 0..1 Description: The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. Range: Date confidence 0..1 Description: A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence. Range: Double subject_match_field 0..* Description: A tuple of fields (term annotations on the subject) that was used for the match. Range: EntityReference object_match_field 0..* Description: A tuple of fields (term annotations on the object) that was used for the match. Range: EntityReference match_string 0..* Description: Strings that are shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots. Range: String subject_preprocessing 0..* Description: Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum object_preprocessing 0..* Description: Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum match_term_type 0..1 Description: Specifies what type of terms are being matched (class, property, or individual). Range: match_term_type_enum Example: ClassMatch None semantic_similarity_score 0..1 Description: A score between 0 and 1 to denote the semantic similarity, where 1 denotes equivalence. Range: Double semantic_similarity_measure 0..1 Description: The measure used for computing the the semantic similarity score. To make processing this field as unambiguous as possible, we recommend using wikidata identifiers, but wikipedia pages could also be acceptable. Range: String Example: https://www.wikidata.org/wiki/Q865360 (the Wikidata identifier for the Jaccard index measure). see_also 0..* Description: A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment Range: String other 0..1 Description: Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. Range: String comment 0..1 Description: Free text field containing either curator notes or text generated by tool providing additional informative information. Range: String Other properties Mappings: owl:Axiom","title":"Class: mapping"},{"location":"Mapping/#class-mapping","text":"Represents an individual mapping between a pair of entities URI: sssom:Mapping","title":"Class: mapping"},{"location":"Mapping/#referenced-by-class","text":"None mappings 0..* Mapping","title":"Referenced by Class"},{"location":"Mapping/#attributes","text":"","title":"Attributes"},{"location":"Mapping/#own","text":"subject_id 1..1 Description: The ID of the subject of the mapping. Range: EntityReference Example: HP:0009894 The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears' subject_label 0..1 Description: The label of subject of the mapping Range: String Example: Thickened ears None subject_category 0..1 Description: The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. Range: String Example: UBERON:0001062 (The CURIE of the Uberon term for \"anatomical entity\".) Example: biolink:Gene (The CURIE of the biolink class for genes.) predicate_id 1..1 Description: The ID of the predicate or relation that relates the subject and object of this match. Range: EntityReference Example: skos:exactMatch None predicate_label 0..1 Description: The label of the predicate/relation of the mapping Range: String Example: owl:sameAs The subject and the object are instances (owl individuals), and the two instances are the same. Example: owl:equivalentClass The subject and the object are classes (owl class), and the two classes are the same. Example: owl:equivalentProperty The subject and the object are properties (owl object, data, annotation properties), and the two properties are the same. Example: rdfs:subClassOf The subject and the object are classes (owl class), and the subject is a subclass of the object. Example: rdfs:subPropertyOf The subject and the object are properties (owl object, data, annotation properties), and the subject is a subproperty of the object. Example: skos:relatedMatch The subject and the object are associated in some unspecified way. Example: skos:closeMatch The subject and the object are sufficiently similar that they can be used interchangeably in some information retrieval applications. Example: skos:exactMatch The subject and the object can, with a high degree of confidence, be used interchangeably across a wide range of information retrieval applications. Example: skos:narrowMatch From the SKOS primer: A triple skos:narrower (and skos:narrowMatch) asserts that , the object of the triple, is a narrower concept than , the subject of the triple. Example: skos:broadMatch From the SKOS primer: A triple skos:broader (and skos:broadMatch) asserts that , the object of the triple, is a broader concept than , the subject of the triple. Example: oio:database_cross_reference Two terms are related in some way. The meaning is frequently consistent across a single set of mappings. Note this property is often overloaded even where the terms are of a different nature (e.g. interpro2go) Example: rdfs:seeAlso The subject and the object are associated in some unspecified way. The object IRI often resolves to a resource on the web that provides additional information. predicate_modifier 0..1 Description: A modifier for negating the prediate. See https://github.com/mapping-commons/sssom/issues/40 for discussion Range: predicate_modifier_enum Example: Not Negates the predicate, see documentation of predicate_modifier_enum object_id 1..1 Description: The ID of the object of the mapping. Range: EntityReference Example: HP:0009894 The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears' object_label 0..1 Description: The label of object of the mapping Range: String Example: Thickened ears None object_category 0..1 Description: The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. Range: String Example: UBERON:0001062 (The CURIE of the Uberon term for \"anatomical entity\".) Example: biolink:Gene (The CURIE of the biolink class for genes.) match_type 1..* Description: The kind of match that led to the mapping, e.g. Logical or Lexical. Range: match_type_enum Example: Lexical (The type of match that led to the mapping is Lexical, i.e. based on comparing the string representation of an aspect of the subject with the string representation of an aspect of the subject.) Example: HumanCurated (The type of match that led to the mapping was by human expert judgement.) author_id 0..* Description: Identifies the persons or groups responsible for asserting the mappings. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference author_label 0..* Description: A string identifying the author of this mapping. In the spirit of provenance, consider to use author_id instead. Range: String reviewer_id 0..* Description: Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference reviewer_label 0..* Description: A string identifying the reviewer of this mapping. In the spirit of provenance, consider to use author_id instead. Range: String creator_id 0..* Description: Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference creator_label 0..* Description: A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. Range: String license 0..1 Description: A url to the license of the mapping. In absence of a license we assume no license. Range: Uri subject_source 0..1 Description: URI of ontology source for the subject. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) subject_source_version 0..1 Description: Version IRI or version string of the source of the subject term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') object_source 0..1 Description: IRI of ontology source for the object. Version IRI preferred. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) object_source_version 0..1 Description: Version IRI or version string of the source of the object term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') mapping_provider 0..1 Description: URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. Range: Uri mapping_cardinality 0..1 Description: A string indicating whether this mapping is from a 1:1 (the subject_id maps to a single object_id), 1:n (the subject maps to more than one object_id), n:1, 1:0, 0:1 or n:n group. Note that this is a convenience field that should be derivable from the mapping set. Range: mapping_cardinality_enum mapping_tool 0..1 Description: A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. Range: String Example: https://github.com/AgreementMakerLight/AML-Project None mapping_tool_version 0..1 Description: Version string that denotes the version of the mapping tool used. Range: String Example: v3.2 None mapping_date 0..1 Description: The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. Range: Date confidence 0..1 Description: A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence. Range: Double subject_match_field 0..* Description: A tuple of fields (term annotations on the subject) that was used for the match. Range: EntityReference object_match_field 0..* Description: A tuple of fields (term annotations on the object) that was used for the match. Range: EntityReference match_string 0..* Description: Strings that are shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots. Range: String subject_preprocessing 0..* Description: Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum object_preprocessing 0..* Description: Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum match_term_type 0..1 Description: Specifies what type of terms are being matched (class, property, or individual). Range: match_term_type_enum Example: ClassMatch None semantic_similarity_score 0..1 Description: A score between 0 and 1 to denote the semantic similarity, where 1 denotes equivalence. Range: Double semantic_similarity_measure 0..1 Description: The measure used for computing the the semantic similarity score. To make processing this field as unambiguous as possible, we recommend using wikidata identifiers, but wikipedia pages could also be acceptable. Range: String Example: https://www.wikidata.org/wiki/Q865360 (the Wikidata identifier for the Jaccard index measure). see_also 0..* Description: A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment Range: String other 0..1 Description: Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. Range: String comment 0..1 Description: Free text field containing either curator notes or text generated by tool providing additional informative information. Range: String","title":"Own"},{"location":"Mapping/#other-properties","text":"Mappings: owl:Axiom","title":"Other properties"},{"location":"MappingSet/","text":"Class: mapping set Represents a set of mappings URI: sssom:MappingSet Referenced by Class Attributes Own mappings 0..* Description: Contains a list of mapping objects Range: Mapping mapping_set_id 1..1 Description: A globally unique identifier for the mapping set (not each individual mapping). Should be IRI, ideally resolvable. Range: Uri Example: http://purl.obolibrary.org/obo/mondo/mappings/mondo_exactmatch_ncit.sssom.tsv (A persistent URI pointing to the latest version of the Mondo - NCIT mapping in the Mondo namespace.) mapping_set_version 0..1 Description: A version string for the mapping. Range: String Example: 2020-01-01 (A date-based version that indicates that the mapping was published on the 1st January in 2021.) Example: 1.2.1 (A semantic version tag that indicates that this is the 1st major, 2nd minor version, patch 1 (https://semver.org/).) mapping_set_source 0..* Description: A mapping set or set of mapping set that was used to derive the mapping set. Range: EntityReference Example: MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv None Example: MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv|MONDO_MAPPINGS:mondo_exactmatch_omim.sssom.tsv (multivalued example in TSV) mapping_set_description 0..1 Description: A description of the mapping set. Range: String Example: This mapping set was produced to integrate human and mouse phenotype data at the IMPC. It is primarily used for making mouse phenotypes searchable by human synonyms at https://mousephenotype.org/. None creator_id 0..* Description: Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference creator_label 0..* Description: A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. Range: String mapping set\u279elicense 1..1 Description: A url to the license of the mapping. In absence of a license we assume no license. Range: Uri subject_source 0..1 Description: URI of ontology source for the subject. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) subject_source_version 0..1 Description: Version IRI or version string of the source of the subject term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') object_source 0..1 Description: IRI of ontology source for the object. Version IRI preferred. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) object_source_version 0..1 Description: Version IRI or version string of the source of the object term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') mapping_provider 0..1 Description: URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. Range: Uri mapping_tool 0..1 Description: A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. Range: String Example: https://github.com/AgreementMakerLight/AML-Project None mapping_date 0..1 Description: The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. Range: Date subject_match_field 0..* Description: A tuple of fields (term annotations on the subject) that was used for the match. Range: EntityReference object_match_field 0..* Description: A tuple of fields (term annotations on the object) that was used for the match. Range: EntityReference subject_preprocessing 0..* Description: Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum object_preprocessing 0..* Description: Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum match_term_type 0..1 Description: Specifies what type of terms are being matched (class, property, or individual). Range: match_term_type_enum Example: ClassMatch None see_also 0..* Description: A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment Range: String other 0..1 Description: Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. Range: String comment 0..1 Description: Free text field containing either curator notes or text generated by tool providing additional informative information. Range: String","title":"Class: mapping set"},{"location":"MappingSet/#class-mapping-set","text":"Represents a set of mappings URI: sssom:MappingSet","title":"Class: mapping set"},{"location":"MappingSet/#referenced-by-class","text":"","title":"Referenced by Class"},{"location":"MappingSet/#attributes","text":"","title":"Attributes"},{"location":"MappingSet/#own","text":"mappings 0..* Description: Contains a list of mapping objects Range: Mapping mapping_set_id 1..1 Description: A globally unique identifier for the mapping set (not each individual mapping). Should be IRI, ideally resolvable. Range: Uri Example: http://purl.obolibrary.org/obo/mondo/mappings/mondo_exactmatch_ncit.sssom.tsv (A persistent URI pointing to the latest version of the Mondo - NCIT mapping in the Mondo namespace.) mapping_set_version 0..1 Description: A version string for the mapping. Range: String Example: 2020-01-01 (A date-based version that indicates that the mapping was published on the 1st January in 2021.) Example: 1.2.1 (A semantic version tag that indicates that this is the 1st major, 2nd minor version, patch 1 (https://semver.org/).) mapping_set_source 0..* Description: A mapping set or set of mapping set that was used to derive the mapping set. Range: EntityReference Example: MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv None Example: MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv|MONDO_MAPPINGS:mondo_exactmatch_omim.sssom.tsv (multivalued example in TSV) mapping_set_description 0..1 Description: A description of the mapping set. Range: String Example: This mapping set was produced to integrate human and mouse phenotype data at the IMPC. It is primarily used for making mouse phenotypes searchable by human synonyms at https://mousephenotype.org/. None creator_id 0..* Description: Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. Range: EntityReference creator_label 0..* Description: A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. Range: String mapping set\u279elicense 1..1 Description: A url to the license of the mapping. In absence of a license we assume no license. Range: Uri subject_source 0..1 Description: URI of ontology source for the subject. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) subject_source_version 0..1 Description: Version IRI or version string of the source of the subject term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') object_source 0..1 Description: IRI of ontology source for the object. Version IRI preferred. Range: Uri Example: http://purl.obolibrary.org/obo/mondo.owl (A persistent IRI pointing to the latest version of the Mondo ontology.) object_source_version 0..1 Description: Version IRI or version string of the source of the object term. Range: String Example: http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl (A persistent Version IRI pointing to the Mondo version '2021-01-30') mapping_provider 0..1 Description: URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. Range: Uri mapping_tool 0..1 Description: A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. Range: String Example: https://github.com/AgreementMakerLight/AML-Project None mapping_date 0..1 Description: The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. Range: Date subject_match_field 0..* Description: A tuple of fields (term annotations on the subject) that was used for the match. Range: EntityReference object_match_field 0..* Description: A tuple of fields (term annotations on the object) that was used for the match. Range: EntityReference subject_preprocessing 0..* Description: Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum object_preprocessing 0..* Description: Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. Range: preprocessing_method_enum match_term_type 0..1 Description: Specifies what type of terms are being matched (class, property, or individual). Range: match_term_type_enum Example: ClassMatch None see_also 0..* Description: A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment Range: String other 0..1 Description: Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. Range: String comment 0..1 Description: Free text field containing either curator notes or text generated by tool providing additional informative information. Range: String","title":"Own"},{"location":"Ncname/","text":"Type: ncname Prefix part of CURIE URI: linkml:Ncname Root (builtin) type NCName Representation str","title":"Type: ncname"},{"location":"Ncname/#type-ncname","text":"Prefix part of CURIE URI: linkml:Ncname Root (builtin) type NCName Representation str","title":"Type: ncname"},{"location":"Nodeidentifier/","text":"Type: nodeidentifier A URI, CURIE or BNODE that represents a node in a model. URI: linkml:Nodeidentifier Root (builtin) type NodeIdentifier Representation str","title":"Type: nodeidentifier"},{"location":"Nodeidentifier/#type-nodeidentifier","text":"A URI, CURIE or BNODE that represents a node in a model. URI: linkml:Nodeidentifier Root (builtin) type NodeIdentifier Representation str","title":"Type: nodeidentifier"},{"location":"Objectidentifier/","text":"Type: objectidentifier A URI or CURIE that represents an object in the model. URI: linkml:Objectidentifier Root (builtin) type ElementIdentifier Representation str Other properties Comments: Used for inheritence and type checking","title":"Type: objectidentifier"},{"location":"Objectidentifier/#type-objectidentifier","text":"A URI or CURIE that represents an object in the model. URI: linkml:Objectidentifier Root (builtin) type ElementIdentifier Representation str","title":"Type: objectidentifier"},{"location":"Objectidentifier/#other-properties","text":"Comments: Used for inheritence and type checking","title":"Other properties"},{"location":"String/","text":"Type: string A character string URI: linkml:String Root (builtin) type str","title":"Type: string"},{"location":"String/#type-string","text":"A character string URI: linkml:String Root (builtin) type str","title":"Type: string"},{"location":"Time/","text":"Type: time A time object represents a (local) time of day, independent of any particular day URI: linkml:Time Root (builtin) type XSDTime Representation str","title":"Type: time"},{"location":"Time/#type-time","text":"A time object represents a (local) time of day, independent of any particular day URI: linkml:Time Root (builtin) type XSDTime Representation str","title":"Type: time"},{"location":"Uri/","text":"Type: uri a complete URI URI: linkml:Uri Root (builtin) type URI Representation str","title":"Type: uri"},{"location":"Uri/#type-uri","text":"a complete URI URI: linkml:Uri Root (builtin) type URI Representation str","title":"Type: uri"},{"location":"Uriorcurie/","text":"Type: uriorcurie a URI or a CURIE URI: linkml:Uriorcurie Root (builtin) type URIorCURIE Representation str","title":"Type: uriorcurie"},{"location":"Uriorcurie/#type-uriorcurie","text":"a URI or a CURIE URI: linkml:Uriorcurie Root (builtin) type URIorCURIE Representation str","title":"Type: uriorcurie"},{"location":"author_id/","text":"Slot: author_id Identifies the persons or groups responsible for asserting the mappings. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. URI: sssom:author_id Domain and Range None \u2192 0..* EntityReference Parents Children Used by Mapping Other properties Mappings: pav:authoredBy","title":"Slot: author_id"},{"location":"author_id/#slot-author_id","text":"Identifies the persons or groups responsible for asserting the mappings. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. URI: sssom:author_id","title":"Slot: author_id"},{"location":"author_id/#domain-and-range","text":"None \u2192 0..* EntityReference","title":"Domain and Range"},{"location":"author_id/#parents","text":"","title":"Parents"},{"location":"author_id/#children","text":"","title":"Children"},{"location":"author_id/#used-by","text":"Mapping","title":"Used by"},{"location":"author_id/#other-properties","text":"Mappings: pav:authoredBy","title":"Other properties"},{"location":"author_label/","text":"Slot: author_label A string identifying the author of this mapping. In the spirit of provenance, consider to use author_id instead. URI: sssom:author_label Domain and Range None \u2192 0..* String Parents Children Used by Mapping","title":"Slot: author_label"},{"location":"author_label/#slot-author_label","text":"A string identifying the author of this mapping. In the spirit of provenance, consider to use author_id instead. URI: sssom:author_label","title":"Slot: author_label"},{"location":"author_label/#domain-and-range","text":"None \u2192 0..* String","title":"Domain and Range"},{"location":"author_label/#parents","text":"","title":"Parents"},{"location":"author_label/#children","text":"","title":"Children"},{"location":"author_label/#used-by","text":"Mapping","title":"Used by"},{"location":"comment/","text":"Slot: comment Free text field containing either curator notes or text generated by tool providing additional informative information. URI: sssom:comment Domain and Range None \u2192 0..1 String Parents Children Used by Mapping MappingSet Other properties Mappings: rdfs:comment","title":"Slot: comment"},{"location":"comment/#slot-comment","text":"Free text field containing either curator notes or text generated by tool providing additional informative information. URI: sssom:comment","title":"Slot: comment"},{"location":"comment/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"comment/#parents","text":"","title":"Parents"},{"location":"comment/#children","text":"","title":"Children"},{"location":"comment/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"comment/#other-properties","text":"Mappings: rdfs:comment","title":"Other properties"},{"location":"confidence/","text":"Slot: confidence A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence. URI: sssom:confidence Domain and Range None \u2192 0..1 Double Parents Children Used by Mapping","title":"Slot: confidence"},{"location":"confidence/#slot-confidence","text":"A score between 0 and 1 to denote the confidence or probability that the match is correct, where 1 denotes total confidence. URI: sssom:confidence","title":"Slot: confidence"},{"location":"confidence/#domain-and-range","text":"None \u2192 0..1 Double","title":"Domain and Range"},{"location":"confidence/#parents","text":"","title":"Parents"},{"location":"confidence/#children","text":"","title":"Children"},{"location":"confidence/#used-by","text":"Mapping","title":"Used by"},{"location":"creator_id/","text":"Slot: creator_id Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. URI: sssom:creator_id Domain and Range None \u2192 0..* EntityReference Parents Children Used by Mapping MappingSet Other properties Mappings: dc:creator","title":"Slot: creator_id"},{"location":"creator_id/#slot-creator_id","text":"Identifies the persons or groups responsible for the creation of the mapping. The creator is the agent that put the mapping in its published form, which may be different from the author, which is a person that was actively involved in the assertion of the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. URI: sssom:creator_id","title":"Slot: creator_id"},{"location":"creator_id/#domain-and-range","text":"None \u2192 0..* EntityReference","title":"Domain and Range"},{"location":"creator_id/#parents","text":"","title":"Parents"},{"location":"creator_id/#children","text":"","title":"Children"},{"location":"creator_id/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"creator_id/#other-properties","text":"Mappings: dc:creator","title":"Other properties"},{"location":"creator_label/","text":"Slot: creator_label A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. URI: sssom:creator_label Domain and Range None \u2192 0..* String Parents Children Used by Mapping MappingSet","title":"Slot: creator_label"},{"location":"creator_label/#slot-creator_label","text":"A string identifying the creator of this mapping. In the spirit of provenance, consider to use creator_id instead. URI: sssom:creator_label","title":"Slot: creator_label"},{"location":"creator_label/#domain-and-range","text":"None \u2192 0..* String","title":"Domain and Range"},{"location":"creator_label/#parents","text":"","title":"Parents"},{"location":"creator_label/#children","text":"","title":"Children"},{"location":"creator_label/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"credits/","text":"Credits Phenomics First Parts of this work were funded by Phenomics First (NIH / NHGRI #1RM1HG010860-01): Design of the specification Integration of sssom-py into the Mondo integration Development of the sssom-py CLI (command-line client) Bosch Gift to LBNL Parts of this work were funded by a gift from Bosch to the Lawrence Berkely National Laboratories (LBNL): sssom-py IO functionality and deployment on pypi Testing framework File format converters in sssom-py Documentation pages of SSSOM (https://mapping-commons.github.io/sssom) Significant contributions This project was made using the Link Model Language (LinkML) framework Harvard Medical School (through significant contributions of Charlie Hoyt, including refactoring of sssom-py, release and quality control infrastructure)","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#phenomics-first","text":"Parts of this work were funded by Phenomics First (NIH / NHGRI #1RM1HG010860-01): Design of the specification Integration of sssom-py into the Mondo integration Development of the sssom-py CLI (command-line client)","title":"Phenomics First"},{"location":"credits/#bosch-gift-to-lbnl","text":"Parts of this work were funded by a gift from Bosch to the Lawrence Berkely National Laboratories (LBNL): sssom-py IO functionality and deployment on pypi Testing framework File format converters in sssom-py Documentation pages of SSSOM (https://mapping-commons.github.io/sssom)","title":"Bosch Gift to LBNL"},{"location":"credits/#significant-contributions","text":"This project was made using the Link Model Language (LinkML) framework Harvard Medical School (through significant contributions of Charlie Hoyt, including refactoring of sssom-py, release and quality control infrastructure)","title":"Significant contributions"},{"location":"editors/","text":"Still under development -- not yet ready for prime time Template for LinkML based schemas Requirements Python >= 3.7.1 GNU make - A command line gnu make process (Windows users can use cygwin - make comes built in on a Mac) pip - comes with most python distros - you should be ok virtualenv - can be added via pip install virtualenv pipenv - can be added via pip install pipenv What is this? This is a GitHub template for a LinkML based projects. It allows you to create a project for your schema as quickly as possible. It takes care of generating a beautiful readthedocs themed site, as well as downstream artefacts, including: JSON-Schema ShEx OWL RDF (direct mapping) JSON-LD Contexts SQL DDL (TODO) Python classes to represent model elements TSV/CSV reports (TODO) Quickstart Click the big green \"Use this template\" button on this page Name your repo according to your schema, e.g. my-awsome-project-model, and clone it Edit model/CONFIG.yaml to set your specific parameters. The details on the parameters can be found in the LinkML Template Configuration Model directory. ( Note that the Template Configuration Model was built using this very template. ) Configure the repository: make -f MakeConfig reset This will generate a number of files that can be used to make, test, and distribute your final model. Note that the template-configurator only needs to be run once as a rule. You can, however, re-generate allof the target artifacts with make -f MakeConfig reset . You can also selectively remove artifacts and get them regenerated with make -f MakeConfig update 5. Rename the schema file in model/schema to match the root_schema named in the CONFIG.yaml file. Note: root_schema does not have the .yaml suffix, the file does. As an example, if you specified root_schema: my-schema , the schema would be named model/schema/my-schema.yaml 6. Edit the root_schema to add your own types, classes and slots. 7. Type make to build your downstream artefacts (jsonschema, owl, etc) 8. Once satisfied, commit your new project to github, which will rerun the make process. 9. The package can also be installed in pypi - this is an advanced topic, see PYPI_SETUP for details 10. This file (ABOUT.md) and the images directory can be removed once you are satisfied How it works This repo is a GitHub \"template\" repo. When you \"Use this template\" it will make a copy for your project. Everything is orchestrated by a generic single Makefile . For this to work you should follow certain conventions: Keep your schema in src/schema Use the .yaml suffix for all schema files Use the suggested directory layout here. To run the Makefile you will need Python (>=3.7):","title":"<span style=\"color:red\">Still under development -- not yet ready for prime time</span>"},{"location":"editors/#still-under-development-not-yet-ready-for-prime-time","text":"","title":"Still under development -- not yet ready for prime time"},{"location":"editors/#template-for-linkml-based-schemas","text":"","title":"Template for LinkML based schemas"},{"location":"editors/#requirements","text":"Python >= 3.7.1 GNU make - A command line gnu make process (Windows users can use cygwin - make comes built in on a Mac) pip - comes with most python distros - you should be ok virtualenv - can be added via pip install virtualenv pipenv - can be added via pip install pipenv","title":"Requirements"},{"location":"editors/#what-is-this","text":"This is a GitHub template for a LinkML based projects. It allows you to create a project for your schema as quickly as possible. It takes care of generating a beautiful readthedocs themed site, as well as downstream artefacts, including: JSON-Schema ShEx OWL RDF (direct mapping) JSON-LD Contexts SQL DDL (TODO) Python classes to represent model elements TSV/CSV reports (TODO)","title":"What is this?"},{"location":"editors/#quickstart","text":"Click the big green \"Use this template\" button on this page Name your repo according to your schema, e.g. my-awsome-project-model, and clone it Edit model/CONFIG.yaml to set your specific parameters. The details on the parameters can be found in the LinkML Template Configuration Model directory. ( Note that the Template Configuration Model was built using this very template. ) Configure the repository: make -f MakeConfig reset This will generate a number of files that can be used to make, test, and distribute your final model. Note that the template-configurator only needs to be run once as a rule. You can, however, re-generate allof the target artifacts with make -f MakeConfig reset . You can also selectively remove artifacts and get them regenerated with make -f MakeConfig update 5. Rename the schema file in model/schema to match the root_schema named in the CONFIG.yaml file. Note: root_schema does not have the .yaml suffix, the file does. As an example, if you specified root_schema: my-schema , the schema would be named model/schema/my-schema.yaml 6. Edit the root_schema to add your own types, classes and slots. 7. Type make to build your downstream artefacts (jsonschema, owl, etc) 8. Once satisfied, commit your new project to github, which will rerun the make process. 9. The package can also be installed in pypi - this is an advanced topic, see PYPI_SETUP for details 10. This file (ABOUT.md) and the images directory can be removed once you are satisfied","title":"Quickstart"},{"location":"editors/#how-it-works","text":"This repo is a GitHub \"template\" repo. When you \"Use this template\" it will make a copy for your project. Everything is orchestrated by a generic single Makefile . For this to work you should follow certain conventions: Keep your schema in src/schema Use the .yaml suffix for all schema files Use the suggested directory layout here. To run the Makefile you will need Python (>=3.7):","title":"How it works"},{"location":"equivalent_property/","text":"Slot: equivalent_property SSSOM property should be mapped to: URI: sssom:equivalent_property Domain and Range None \u2192 0..1 String Parents Children Used by","title":"Slot: equivalent_property"},{"location":"equivalent_property/#slot-equivalent_property","text":"SSSOM property should be mapped to: URI: sssom:equivalent_property","title":"Slot: equivalent_property"},{"location":"equivalent_property/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"equivalent_property/#parents","text":"","title":"Parents"},{"location":"equivalent_property/#children","text":"","title":"Children"},{"location":"equivalent_property/#used-by","text":"","title":"Used by"},{"location":"faq/","text":"Frequently Asked Questions (FAQ) Why should our mappings be FAIR and carefully standardised? Mappings are frequently created on an ad-hoc basis, using simple two-column spreadsheets where the first column corresponds to the subject of the mapping, and the second column to the object of the mapping. This is insufficient for a variety of reasons: non-transparent precision: While the assumption is that the subject \"sort of mostly exactly\" maps to the object, in practice this is rarely the case. Matches can exact , where the subject corresponds 100% to the object, broad , where the object is broader than the subject, and others. Qualifiers like exact , broad , narrow , related and close qualify the precision of the mapping (not to be mistaken for fuzziness of confidence). Without knowing the precision, we cannot accurately transform our data, nor can we use the mappings to \"walk\", i.e. move from one mapping to another, see SSSOM 5-Star recommendation for mappings non-transparent incompleteness: We don't know when the mapping was created, on the basis of what version of the terminological source of the subject or object. As time passes, we also lose confidence whether there would now be more suitable mappings, or wether there are new terms that are now fully covered by the mappings. non-transparent confidence: whether a tool or a human propose the mapping, there is always a bit of a risk the mapping call may be wrong. As consumers of the mappings we need to know how confident the mapping authors were (confidence score), and why they confident (curation rules, mapping justification). Currently, mappings are created by a variety of systems, manually curated and automatic, and we need a way to efficiently collect and combine them. Mapping sets and mappings with quality provenance metadata allow us to trace faulty mappings to the source and correct them in a way that all users of the mapping set will profit from it. Is there a central repository of SSSOM files? The idea of a mapping commons is to provide mappings in a decentralised fashion akin to OBO ontologies. A mapping commons collects mappings relevant to a particular community, either by reference (i.e. pulling in mapping sets already published elsewhere), or directly maintained at the mapping commons ( example ). Their integration as part of a repository (mapping server) would look like EBI's Ontology X-ref Browser or BioPortal , but the exact scope of these repositories is use case dependent - EBI may chose to show cross references from and to ontologies loaded into OLS, while BioPortal chooses to show a different set of mappings. The plan is to update EBI's OxO to support the full SSSOM data model, drawing curated mappings from a variety of mapping commons, by Summer 2022 - but its unlikely that one central place will index all available mappings. Who is responsible for the conversion into SSSOM - the primary developers of an artefact, or a mapping commons? Like with everything on the web, the closer to the source the SSSOM mappings are curated, the better. Ideally, mappings are maintained as part of ontology release pipelines or by primary mapping creators, rather than derived from a secondary source such as a database, further downstream. The reason for this is that ideally, we would want mappings to be reviewable and editable in much the same way as open ontologies, offering issue trackers and an active community incorporating changes. That said, it is unlikely that all existing mappings will be maintained by the source directly. For example, we expect to maintain the SSSOM mappings derived from the vast majority of OBO ontology xrefs as a downstream task ( example ). How dependent are we on the sssom-py toolkit? SSSOM follows the core design principle that mapping tables should be (a) self-contained, i.e. including its prefix maps similar to a turtle file, and (b) readable by normal data science toolkits. An SSSOM table can be read with pandas using the comment='#' parameter (with one caveat, which is that # must be used as a character solely to denote comments), or a very simply combination of a yaml reader and pandas. The SSSOM toolkit however offers some extra functionality, like export to JSON-LD, or RDF or import from other frequently used format. Is the concept of a \"mapping server\" equivalent, complementary, or antagonistic to the existing ontology repositories? A (SSSOM) mapping server is a repository for mappings that enables the browsing of existing mappings, exposing all (or some relevant subset of) SSSOM metadata as search facets. In that sense, it should be considered complementary, as it enables the search for accurate mappings from a specific term or set of terms, something that goes beyond what most ontologies would offer. However, the concept of ontology mappings can be perceived as antagonistic to Open Ontology principles, as its goal is not the logical integration of knowledge, but the association or linking of terms across controlled semantic spaces . The OBO vision involves the building of a coherent, non-redundant semantic space of logically interconnected ontologies, which in particular wants to avoid the introduction of overlapping concepts. The mapping world specifically embraces heterogenous semantic spaces and overlapping concepts, and seeks to bridge the semantic gaps using well-defined mapping relations such as \"skos:broadMatch\" or \"owl:equivalentClass\".","title":"FAQ"},{"location":"faq/#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions (FAQ)"},{"location":"faq/#why-should-our-mappings-be-fair-and-carefully-standardised","text":"Mappings are frequently created on an ad-hoc basis, using simple two-column spreadsheets where the first column corresponds to the subject of the mapping, and the second column to the object of the mapping. This is insufficient for a variety of reasons: non-transparent precision: While the assumption is that the subject \"sort of mostly exactly\" maps to the object, in practice this is rarely the case. Matches can exact , where the subject corresponds 100% to the object, broad , where the object is broader than the subject, and others. Qualifiers like exact , broad , narrow , related and close qualify the precision of the mapping (not to be mistaken for fuzziness of confidence). Without knowing the precision, we cannot accurately transform our data, nor can we use the mappings to \"walk\", i.e. move from one mapping to another, see SSSOM 5-Star recommendation for mappings non-transparent incompleteness: We don't know when the mapping was created, on the basis of what version of the terminological source of the subject or object. As time passes, we also lose confidence whether there would now be more suitable mappings, or wether there are new terms that are now fully covered by the mappings. non-transparent confidence: whether a tool or a human propose the mapping, there is always a bit of a risk the mapping call may be wrong. As consumers of the mappings we need to know how confident the mapping authors were (confidence score), and why they confident (curation rules, mapping justification). Currently, mappings are created by a variety of systems, manually curated and automatic, and we need a way to efficiently collect and combine them. Mapping sets and mappings with quality provenance metadata allow us to trace faulty mappings to the source and correct them in a way that all users of the mapping set will profit from it.","title":"Why should our mappings be FAIR and carefully standardised?"},{"location":"faq/#is-there-a-central-repository-of-sssom-files","text":"The idea of a mapping commons is to provide mappings in a decentralised fashion akin to OBO ontologies. A mapping commons collects mappings relevant to a particular community, either by reference (i.e. pulling in mapping sets already published elsewhere), or directly maintained at the mapping commons ( example ). Their integration as part of a repository (mapping server) would look like EBI's Ontology X-ref Browser or BioPortal , but the exact scope of these repositories is use case dependent - EBI may chose to show cross references from and to ontologies loaded into OLS, while BioPortal chooses to show a different set of mappings. The plan is to update EBI's OxO to support the full SSSOM data model, drawing curated mappings from a variety of mapping commons, by Summer 2022 - but its unlikely that one central place will index all available mappings.","title":"Is there a central repository of SSSOM files?"},{"location":"faq/#who-is-responsible-for-the-conversion-into-sssom-the-primary-developers-of-an-artefact-or-a-mapping-commons","text":"Like with everything on the web, the closer to the source the SSSOM mappings are curated, the better. Ideally, mappings are maintained as part of ontology release pipelines or by primary mapping creators, rather than derived from a secondary source such as a database, further downstream. The reason for this is that ideally, we would want mappings to be reviewable and editable in much the same way as open ontologies, offering issue trackers and an active community incorporating changes. That said, it is unlikely that all existing mappings will be maintained by the source directly. For example, we expect to maintain the SSSOM mappings derived from the vast majority of OBO ontology xrefs as a downstream task ( example ).","title":"Who is responsible for the conversion into SSSOM - the primary developers of an artefact, or a mapping commons?"},{"location":"faq/#how-dependent-are-we-on-the-sssom-py-toolkit","text":"SSSOM follows the core design principle that mapping tables should be (a) self-contained, i.e. including its prefix maps similar to a turtle file, and (b) readable by normal data science toolkits. An SSSOM table can be read with pandas using the comment='#' parameter (with one caveat, which is that # must be used as a character solely to denote comments), or a very simply combination of a yaml reader and pandas. The SSSOM toolkit however offers some extra functionality, like export to JSON-LD, or RDF or import from other frequently used format.","title":"How dependent are we on the sssom-py toolkit?"},{"location":"faq/#is-the-concept-of-a-mapping-server-equivalent-complementary-or-antagonistic-to-the-existing-ontology-repositories","text":"A (SSSOM) mapping server is a repository for mappings that enables the browsing of existing mappings, exposing all (or some relevant subset of) SSSOM metadata as search facets. In that sense, it should be considered complementary, as it enables the search for accurate mappings from a specific term or set of terms, something that goes beyond what most ontologies would offer. However, the concept of ontology mappings can be perceived as antagonistic to Open Ontology principles, as its goal is not the logical integration of knowledge, but the association or linking of terms across controlled semantic spaces . The OBO vision involves the building of a coherent, non-redundant semantic space of logically interconnected ontologies, which in particular wants to avoid the introduction of overlapping concepts. The mapping world specifically embraces heterogenous semantic spaces and overlapping concepts, and seeks to bridge the semantic gaps using well-defined mapping relations such as \"skos:broadMatch\" or \"owl:equivalentClass\".","title":"Is the concept of a \"mapping server\" equivalent, complementary, or antagonistic to the existing ontology repositories?"},{"location":"home/","text":"Introduction SSSOM is a Simple Standard for Sharing Ontology Mappings, providing a TSV-based representation for ontology term mappings a comprehensive set of standard metadata elements to describe mappings and a standard translation between the TSV and the Web Ontology Language (OWL). For more information please visit our GitHub page","title":"Home"},{"location":"home/#introduction","text":"SSSOM is a Simple Standard for Sharing Ontology Mappings, providing a TSV-based representation for ontology term mappings a comprehensive set of standard metadata elements to describe mappings and a standard translation between the TSV and the Web Ontology Language (OWL). For more information please visit our GitHub page","title":"Introduction"},{"location":"license/","text":"Slot: license A url to the license of the mapping. In absence of a license we assume no license. URI: sssom:license Domain and Range None \u2192 0..1 Uri Parents Children mapping set\u279elicense Used by Mapping Other properties Mappings: dcterms:license","title":"Slot: license"},{"location":"license/#slot-license","text":"A url to the license of the mapping. In absence of a license we assume no license. URI: sssom:license","title":"Slot: license"},{"location":"license/#domain-and-range","text":"None \u2192 0..1 Uri","title":"Domain and Range"},{"location":"license/#parents","text":"","title":"Parents"},{"location":"license/#children","text":"mapping set\u279elicense","title":"Children"},{"location":"license/#used-by","text":"Mapping","title":"Used by"},{"location":"license/#other-properties","text":"Mappings: dcterms:license","title":"Other properties"},{"location":"mapping_cardinality/","text":"Slot: mapping_cardinality A string indicating whether this mapping is from a 1:1 (the subject_id maps to a single object_id), 1:n (the subject maps to more than one object_id), n:1, 1:0, 0:1 or n:n group. Note that this is a convenience field that should be derivable from the mapping set. URI: sssom:mapping_cardinality Domain and Range None \u2192 0..1 mapping_cardinality_enum Parents Children Used by Mapping","title":"Slot: mapping_cardinality"},{"location":"mapping_cardinality/#slot-mapping_cardinality","text":"A string indicating whether this mapping is from a 1:1 (the subject_id maps to a single object_id), 1:n (the subject maps to more than one object_id), n:1, 1:0, 0:1 or n:n group. Note that this is a convenience field that should be derivable from the mapping set. URI: sssom:mapping_cardinality","title":"Slot: mapping_cardinality"},{"location":"mapping_cardinality/#domain-and-range","text":"None \u2192 0..1 mapping_cardinality_enum","title":"Domain and Range"},{"location":"mapping_cardinality/#parents","text":"","title":"Parents"},{"location":"mapping_cardinality/#children","text":"","title":"Children"},{"location":"mapping_cardinality/#used-by","text":"Mapping","title":"Used by"},{"location":"mapping_cardinality_enum/","text":"Enum: mapping_cardinality_enum URI: sssom:mapping_cardinality_enum Other properties Permissible Values Text Description Meaning Other Information 1:1 One-to-one mapping 1:n One-to-many mapping n:1 Many-to-one mapping 1:0 One-to-none mapping 0:1 None-to-one mapping n:n Many-to-many mapping","title":"Enum: mapping_cardinality_enum"},{"location":"mapping_cardinality_enum/#enum-mapping_cardinality_enum","text":"URI: sssom:mapping_cardinality_enum","title":"Enum: mapping_cardinality_enum"},{"location":"mapping_cardinality_enum/#other-properties","text":"","title":"Other properties"},{"location":"mapping_cardinality_enum/#permissible-values","text":"Text Description Meaning Other Information 1:1 One-to-one mapping 1:n One-to-many mapping n:1 Many-to-one mapping 1:0 One-to-none mapping 0:1 None-to-one mapping n:n Many-to-many mapping","title":"Permissible Values"},{"location":"mapping_date/","text":"Slot: mapping_date The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. URI: sssom:mapping_date Domain and Range None \u2192 0..1 Date Parents Children Used by Mapping MappingSet Other properties Mappings: pav:authoredOn","title":"Slot: mapping_date"},{"location":"mapping_date/#slot-mapping_date","text":"The date the mapping was asserted. This is different from the date the mapping was published or compiled in a SSSOM file. URI: sssom:mapping_date","title":"Slot: mapping_date"},{"location":"mapping_date/#domain-and-range","text":"None \u2192 0..1 Date","title":"Domain and Range"},{"location":"mapping_date/#parents","text":"","title":"Parents"},{"location":"mapping_date/#children","text":"","title":"Children"},{"location":"mapping_date/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"mapping_date/#other-properties","text":"Mappings: pav:authoredOn","title":"Other properties"},{"location":"mapping_provider/","text":"Slot: mapping_provider URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. URI: sssom:mapping_provider Domain and Range None \u2192 0..1 Uri Parents Children Used by Mapping MappingSet","title":"Slot: mapping_provider"},{"location":"mapping_provider/#slot-mapping_provider","text":"URL pointing to the source that provided the mapping, for example an ontology that already contains the mappings, or a database from which it was derived. URI: sssom:mapping_provider","title":"Slot: mapping_provider"},{"location":"mapping_provider/#domain-and-range","text":"None \u2192 0..1 Uri","title":"Domain and Range"},{"location":"mapping_provider/#parents","text":"","title":"Parents"},{"location":"mapping_provider/#children","text":"","title":"Children"},{"location":"mapping_provider/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"mapping_set_description/","text":"Slot: mapping_set_description A description of the mapping set. URI: sssom:mapping_set_description Domain and Range None \u2192 0..1 String Parents Children Used by MappingSet Other properties Mappings: dc:description Examples: Example(value='This mapping set was produced to integrate human and mouse phenotype data at the IMPC. It is primarily used for making mouse phenotypes searchable by human synonyms at https://mousephenotype.org/.', description=None)","title":"Slot: mapping_set_description"},{"location":"mapping_set_description/#slot-mapping_set_description","text":"A description of the mapping set. URI: sssom:mapping_set_description","title":"Slot: mapping_set_description"},{"location":"mapping_set_description/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"mapping_set_description/#parents","text":"","title":"Parents"},{"location":"mapping_set_description/#children","text":"","title":"Children"},{"location":"mapping_set_description/#used-by","text":"MappingSet","title":"Used by"},{"location":"mapping_set_description/#other-properties","text":"Mappings: dc:description Examples: Example(value='This mapping set was produced to integrate human and mouse phenotype data at the IMPC. It is primarily used for making mouse phenotypes searchable by human synonyms at https://mousephenotype.org/.', description=None)","title":"Other properties"},{"location":"mapping_set_id/","text":"Slot: mapping_set_id A globally unique identifier for the mapping set (not each individual mapping). Should be IRI, ideally resolvable. URI: sssom:mapping_set_id Domain and Range None \u2192 1..1 Uri Parents Children Used by MappingSet Other properties Examples: Example(value='http://purl.obolibrary.org/obo/mondo/mappings/mondo_exactmatch_ncit.sssom.tsv', description='(A persistent URI pointing to the latest version of the Mondo - NCIT mapping in the Mondo namespace.)')","title":"Slot: mapping_set_id"},{"location":"mapping_set_id/#slot-mapping_set_id","text":"A globally unique identifier for the mapping set (not each individual mapping). Should be IRI, ideally resolvable. URI: sssom:mapping_set_id","title":"Slot: mapping_set_id"},{"location":"mapping_set_id/#domain-and-range","text":"None \u2192 1..1 Uri","title":"Domain and Range"},{"location":"mapping_set_id/#parents","text":"","title":"Parents"},{"location":"mapping_set_id/#children","text":"","title":"Children"},{"location":"mapping_set_id/#used-by","text":"MappingSet","title":"Used by"},{"location":"mapping_set_id/#other-properties","text":"Examples: Example(value='http://purl.obolibrary.org/obo/mondo/mappings/mondo_exactmatch_ncit.sssom.tsv', description='(A persistent URI pointing to the latest version of the Mondo - NCIT mapping in the Mondo namespace.)')","title":"Other properties"},{"location":"mapping_set_license/","text":"Slot: license A url to the license of the mapping. In absence of a license we assume no license. URI: sssom:mapping_set_license Domain and Range MappingSet \u2192 1..1 Uri Parents is_a: license Children Used by MappingSet Other properties Mappings: dcterms:license","title":"Slot: license"},{"location":"mapping_set_license/#slot-license","text":"A url to the license of the mapping. In absence of a license we assume no license. URI: sssom:mapping_set_license","title":"Slot: license"},{"location":"mapping_set_license/#domain-and-range","text":"MappingSet \u2192 1..1 Uri","title":"Domain and Range"},{"location":"mapping_set_license/#parents","text":"is_a: license","title":"Parents"},{"location":"mapping_set_license/#children","text":"","title":"Children"},{"location":"mapping_set_license/#used-by","text":"MappingSet","title":"Used by"},{"location":"mapping_set_license/#other-properties","text":"Mappings: dcterms:license","title":"Other properties"},{"location":"mapping_set_source/","text":"Slot: mapping_set_source A mapping set or set of mapping set that was used to derive the mapping set. URI: sssom:mapping_set_source Domain and Range None \u2192 0..* EntityReference Parents Children Used by MappingSet Other properties Mappings: prov:wasDerivedFrom Examples: Example(value='MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv', description=None) Example(value='MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv","title":"Slot: mapping_set_source"},{"location":"mapping_set_source/#slot-mapping_set_source","text":"A mapping set or set of mapping set that was used to derive the mapping set. URI: sssom:mapping_set_source","title":"Slot: mapping_set_source"},{"location":"mapping_set_source/#domain-and-range","text":"None \u2192 0..* EntityReference","title":"Domain and Range"},{"location":"mapping_set_source/#parents","text":"","title":"Parents"},{"location":"mapping_set_source/#children","text":"","title":"Children"},{"location":"mapping_set_source/#used-by","text":"MappingSet","title":"Used by"},{"location":"mapping_set_source/#other-properties","text":"Mappings: prov:wasDerivedFrom Examples: Example(value='MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv', description=None) Example(value='MONDO_MAPPINGS:mondo_exactmatch_ncit.sssom.tsv","title":"Other properties"},{"location":"mapping_set_version/","text":"Slot: mapping_set_version A version string for the mapping. URI: sssom:mapping_set_version Domain and Range None \u2192 0..1 String Parents Children Used by MappingSet Other properties Mappings: owl:versionInfo Examples: Example(value='2020-01-01', description='(A date-based version that indicates that the mapping was published on the 1st January in 2021.)') Example(value='1.2.1', description='(A semantic version tag that indicates that this is the 1st major, 2nd minor version, patch 1 (https://semver.org/).)')","title":"Slot: mapping_set_version"},{"location":"mapping_set_version/#slot-mapping_set_version","text":"A version string for the mapping. URI: sssom:mapping_set_version","title":"Slot: mapping_set_version"},{"location":"mapping_set_version/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"mapping_set_version/#parents","text":"","title":"Parents"},{"location":"mapping_set_version/#children","text":"","title":"Children"},{"location":"mapping_set_version/#used-by","text":"MappingSet","title":"Used by"},{"location":"mapping_set_version/#other-properties","text":"Mappings: owl:versionInfo Examples: Example(value='2020-01-01', description='(A date-based version that indicates that the mapping was published on the 1st January in 2021.)') Example(value='1.2.1', description='(A semantic version tag that indicates that this is the 1st major, 2nd minor version, patch 1 (https://semver.org/).)')","title":"Other properties"},{"location":"mapping_tool/","text":"Slot: mapping_tool A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. URI: sssom:mapping_tool Domain and Range None \u2192 0..1 String Parents Children Used by Mapping MappingSet Other properties Examples: Example(value='https://github.com/AgreementMakerLight/AML-Project', description=None)","title":"Slot: mapping_tool"},{"location":"mapping_tool/#slot-mapping_tool","text":"A reference to the tool or algorithm that was used to generate the mapping. Should be a URL pointing to more info about it, but can be free text. URI: sssom:mapping_tool","title":"Slot: mapping_tool"},{"location":"mapping_tool/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"mapping_tool/#parents","text":"","title":"Parents"},{"location":"mapping_tool/#children","text":"","title":"Children"},{"location":"mapping_tool/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"mapping_tool/#other-properties","text":"Examples: Example(value='https://github.com/AgreementMakerLight/AML-Project', description=None)","title":"Other properties"},{"location":"mapping_tool_version/","text":"Slot: mapping_tool_version Version string that denotes the version of the mapping tool used. URI: sssom:mapping_tool_version Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='v3.2', description=None)","title":"Slot: mapping_tool_version"},{"location":"mapping_tool_version/#slot-mapping_tool_version","text":"Version string that denotes the version of the mapping tool used. URI: sssom:mapping_tool_version","title":"Slot: mapping_tool_version"},{"location":"mapping_tool_version/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"mapping_tool_version/#parents","text":"","title":"Parents"},{"location":"mapping_tool_version/#children","text":"","title":"Children"},{"location":"mapping_tool_version/#used-by","text":"Mapping","title":"Used by"},{"location":"mapping_tool_version/#other-properties","text":"Examples: Example(value='v3.2', description=None)","title":"Other properties"},{"location":"mappings/","text":"Slot: mappings Contains a list of mapping objects URI: sssom:mappings Domain and Range None \u2192 0..* Mapping Parents Children Used by MappingSet","title":"Slot: mappings"},{"location":"mappings/#slot-mappings","text":"Contains a list of mapping objects URI: sssom:mappings","title":"Slot: mappings"},{"location":"mappings/#domain-and-range","text":"None \u2192 0..* Mapping","title":"Domain and Range"},{"location":"mappings/#parents","text":"","title":"Parents"},{"location":"mappings/#children","text":"","title":"Children"},{"location":"mappings/#used-by","text":"MappingSet","title":"Used by"},{"location":"match_string/","text":"Slot: match_string Strings that are shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots. URI: sssom:match_string Domain and Range None \u2192 0..* String Parents Children Used by Mapping","title":"Slot: match_string"},{"location":"match_string/#slot-match_string","text":"Strings that are shared by subj/obj. It is recommended to indicate the fields for the match using the object and subject_match_field slots. URI: sssom:match_string","title":"Slot: match_string"},{"location":"match_string/#domain-and-range","text":"None \u2192 0..* String","title":"Domain and Range"},{"location":"match_string/#parents","text":"","title":"Parents"},{"location":"match_string/#children","text":"","title":"Children"},{"location":"match_string/#used-by","text":"Mapping","title":"Used by"},{"location":"match_term_type/","text":"Slot: match_term_type Specifies what type of terms are being matched (class, property, or individual). URI: sssom:match_term_type Domain and Range None \u2192 0..1 match_term_type_enum Parents Children Used by Mapping MappingSet Other properties Examples: Example(value='ClassMatch', description=None)","title":"Slot: match_term_type"},{"location":"match_term_type/#slot-match_term_type","text":"Specifies what type of terms are being matched (class, property, or individual). URI: sssom:match_term_type","title":"Slot: match_term_type"},{"location":"match_term_type/#domain-and-range","text":"None \u2192 0..1 match_term_type_enum","title":"Domain and Range"},{"location":"match_term_type/#parents","text":"","title":"Parents"},{"location":"match_term_type/#children","text":"","title":"Children"},{"location":"match_term_type/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"match_term_type/#other-properties","text":"Examples: Example(value='ClassMatch', description=None)","title":"Other properties"},{"location":"match_term_type_enum/","text":"Enum: match_term_type_enum URI: sssom:match_term_type_enum Other properties Permissible Values Text Description Meaning Other Information TermMatch A match between two terms ConceptMatch A match between two SKOS concepts ClassMatch A match between two OWL/RDFS classes ObjectPropertyMatch A match between two OWL object properties IndividualMatch A match between two OWL Individuals DataPropertyMatch A match between two OWL object properties","title":"Enum: match_term_type_enum"},{"location":"match_term_type_enum/#enum-match_term_type_enum","text":"URI: sssom:match_term_type_enum","title":"Enum: match_term_type_enum"},{"location":"match_term_type_enum/#other-properties","text":"","title":"Other properties"},{"location":"match_term_type_enum/#permissible-values","text":"Text Description Meaning Other Information TermMatch A match between two terms ConceptMatch A match between two SKOS concepts ClassMatch A match between two OWL/RDFS classes ObjectPropertyMatch A match between two OWL object properties IndividualMatch A match between two OWL Individuals DataPropertyMatch A match between two OWL object properties","title":"Permissible Values"},{"location":"match_type/","text":"Slot: match_type The kind of match that led to the mapping, e.g. Logical or Lexical. URI: sssom:match_type Domain and Range None \u2192 1..* match_type_enum Parents Children Used by Mapping Other properties Examples: Example(value='Lexical', description='(The type of match that led to the mapping is Lexical, i.e. based on comparing the string representation of an aspect of the subject with the string representation of an aspect of the subject.)') Example(value='HumanCurated', description='(The type of match that led to the mapping was by human expert judgement.)')","title":"Slot: match_type"},{"location":"match_type/#slot-match_type","text":"The kind of match that led to the mapping, e.g. Logical or Lexical. URI: sssom:match_type","title":"Slot: match_type"},{"location":"match_type/#domain-and-range","text":"None \u2192 1..* match_type_enum","title":"Domain and Range"},{"location":"match_type/#parents","text":"","title":"Parents"},{"location":"match_type/#children","text":"","title":"Children"},{"location":"match_type/#used-by","text":"Mapping","title":"Used by"},{"location":"match_type/#other-properties","text":"Examples: Example(value='Lexical', description='(The type of match that led to the mapping is Lexical, i.e. based on comparing the string representation of an aspect of the subject with the string representation of an aspect of the subject.)') Example(value='HumanCurated', description='(The type of match that led to the mapping was by human expert judgement.)')","title":"Other properties"},{"location":"match_type_enum/","text":"Enum: match_type_enum URI: sssom:match_type_enum Other properties Permissible Values Text Description Meaning Other Information Lexical Lexical match Logical Logical match HumanCurated Match based on human expert opinion Complex Match based on a variety of different strategies Unspecified Unknown match type SemanticSimilarity Match based on close semantic similarity","title":"Enum: match_type_enum"},{"location":"match_type_enum/#enum-match_type_enum","text":"URI: sssom:match_type_enum","title":"Enum: match_type_enum"},{"location":"match_type_enum/#other-properties","text":"","title":"Other properties"},{"location":"match_type_enum/#permissible-values","text":"Text Description Meaning Other Information Lexical Lexical match Logical Logical match HumanCurated Match based on human expert opinion Complex Match based on a variety of different strategies Unspecified Unknown match type SemanticSimilarity Match based on close semantic similarity","title":"Permissible Values"},{"location":"mc2021/","text":"1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings For a list of participants see: Wikidata: https://www.wikidata.org/wiki/Q108394519 Scholia: https://scholia.toolforge.org/event/Q108394519 In 2020, we introduced the Simple Standard for Sharing Ontology Mappings (SSSOM) as a way for the mapping community to exchange and consolidate mappings using a simple TSV format. SSSOM seeks to solve, in particular, the following problems: Standardising the mapping metadata that is necessary to drive data transformation and knowledge graph merging use cases Enable effective merging and filtering of mapping sets Standardising the representation of mapping sets across formats such as RDF/XML, JSON-LD, TSV, and others. The purpose of this 3-hour workshop: Describing current use cases to the community, and ensuring all community use cases are documented and understood Establishing a user forum for getting support and providing feedback Define a simple governance strategy for organic evolution of standard Describing a number of key open issues: The representation of complex mappings The representation of curation rules The problem of predicate modification The alignment with external standards such as PROV-O and Alignment API Defining the path to a SSSOM beta release (stable) and the rallying for the paper Resources : Overview presentation Outcomes Members of the SSSOM core team are organised as as github team: https://github.com/orgs/mapping-commons/teams/sssom-core If you want to become a member, please make an issue here: https://github.com/mapping-commons/SSSOM/issues We added some of the questions asked to the new SSSOM FAQ: https://mapping-commons.github.io/sssom/faq/ Governance proposal (comments welcome): https://github.com/mapping-commons/SSSOM/issues/82 Governance will evolve over time. Standard and governance will evolve together. We will versioning (like SemVer) and should denote when backwards incompatible changes happen The 5-Star system for open FAIR mappings is now in its first official version. Discussion summary Ben Gyori: would be interesting to discuss beyond the format whether there's a central repository, or whether primary developers will make it as a primary export hosted along with their other artifact. Would there be a process to pull those? Nico: takes a long time for uptake of new publication systems, so this could take a long time -> maybe better to promote on an ontology level. Could also have the side benefit of providing a point of introspection John G: I totally would want BioPortal to be capable of managing the RDF produced from SSSOM resources, and for Bioportal to be a mapping resource and not simply an ontology resource. I suspect the RDF patterns that SSSOM is defining are the gold we'll need for that gold standard for exchanging mappings. Uploading the RDF files can trivially be done in a naive way of course, but integrating that RDF knowledge into Bioportal to make them maximally useful as a separate kind of resource is obviously 'real work' (and so schedules are unknowable). John: how dependent is the library on the software itself? Is it an exchange principle? Nico: LinkML has the advantage that it gets JSON and TTL outputs for free if we use it. Would also be advantageous if more people used this standard for metamodeling to create similar outputs for different modeling Charlie: using \"frontmatter\" format for SSSOM TSV files, like how github is using frontmatter in Jekyll (ref: https://blog.datacite.org/using-yaml-frontmatter-with-csv/) (http://csvy.org/) John G: Analogous to frontmatter format, I keep being drawn to the SKOS Play format as an alternate (but I think TTL-compatible) format for the SSSOM content. How bad would that be? (I can create a ticket) Charlie: Requirements for a default JSON-LD context (e.g., prefix -> URL prefix mapping) How should it be maintained? Should it continue to be manually curated, or is an automated export from something like the Bioregistry a good idea? If it's automatically exported from the Bioregistry, what kinds of interactions might users want to have via the Bioregistry issue tracker to propose improvements? Similarly, we can make tutorials for directly creating PRs. Charlie: How prefixes should be stylized/what is the business logic/decision tree for using OBO Library PURLs, Identifiers.org URLs, Bioregistry URLs, first-party provider URLs, etc. based on what's available and mapped between various first-party providers, third-party providers (e.g., ChemSpider InChI resolver), and meta-providers (e.g., Identifiers.org, OntoBee)? This is both a concern for \"best practices\" in SSSOM defining a custom context and also when using or extending the default context. Charlie: How to represent mappings where the curator is unsure if the relation is correct or not? This happens often when curating equivalences, e.g., in Biomappings https://github.com/biomappings/biomappings/blob/master/src/biomappings/resources/unsure.tsv Tiffany: Is it important to know why someone feels more or less confident about a mapping? If so, is there also a way to include that in the measure of \u201cconfidence\u201d? Sue: In practice I\u2019ve tended to add comments when I am uncertain and have questions. Possibly this could be formalized? Davera clinical use case discussion: Overall issue: mapping sets of things to a term is a goal for clinical mappings mapping recommendations/rational exercise staging and diagnosis information (like stage 1 or stage 2 of a given cancer) Select a set of stages - this is challenging wrt mappings Different kinds of scales describing the same thing are hard/sometimes not \"kosher\" to mix Phenotypes rely on capturing human-readable data on the decision logic of how mappings are applied by standards implementation team Proposed to look at the HL7 Implementation profiles as a way to incorporate an approach to this complex mapping challenge Melissa: rename SSSOM to Slytherin Standard. Charlie 100% supports this (Tiffany: +1; Alex +1) Kristin also likes this. John used it. John G: Ontology repositories are mappings-motivated, to both provide to users good mappings, and to provide good ways for users or managers to ingest, manage, apply, and create mapping knowledge. Ontology repositories are presumably also capable of storing mappings in their semantic (RDF-equivalent) format. With this in mind, is the concept of a \"mapping server\" equivalent, complementary, or antagonistic to the existing ontology repositories? John G: Need to consider identification and versioning of the mapping artifacts. It's one thing to say \"We have all the mapping artifacts and we are giving those out\", but (just like ontologies) citing a mapping artifact requires that you have a unique identifier for that artifact, and that the identifier incorporates the fact the artifact may have multiple versions. Ideally the SSSOM artifacts (like ontologies) would (a) be accessible in a defined format at the identifier IRI, (b) include their identifiers within the SSMOC artifact. I am thinking that an SSMOC is inherently a semantic artifact, and therefore it should follow semantic namespace declaration principles in this regard. Julie: W3id supports regex based redirects (for purls) Breakout sessions Curation rules: documenting the decision rules on how a mapping was determined Effective definition of inclusion criteria/exclusion criteria: Inclusion example: Two ontologies saying I created exact mappings that they have a string match or a string match to a synonym + an xref Exclusion example: Only matched on an acronym Match types Cover partial string matches Other documentation criteria to distinguish exact from narrow/broad - how exact is exact Line between close/narrow/broad Direction of narrow and broad DOS: I'd favor manual mapping be done on definitions + context in ontology, leaving lexical mappings to machines. What metadata could we add to the header to make clear criteria used? One thing it might be useful to record is whether ontology context (relationships & location in classification) of mapped terms was used (Some ontologies/taxonomies have poor quality graphs but high quality term definitions.) Source string match to target (lexical exact, stem, word [synonym and type]) - need for both source and target, how to synonyms fit in Needs: Generalized patterns that relate file header information to row-level information Need more expressivity in the match type Inclusion and exclusion criteria Best practices guide Algorithm/tool/similarity measure for computationally derived mappings Specificity with respect to the parent concept or portion of the hierarchy that the concept is from Mapping provenance and alignment with external provenance standards Problems: We need to distinguish original and derived mappings We need to somehow \u201cencode\u201d how a derived mapping was created (for example through a walk USeful to capture as part of the PROV activity agents (wasAssociatedWith some) mapping tool creator algorithms semantic similarity etc Why provenance: \u201ci dont trust mappings from source x..\u201d Who did it? What tools were used? - are the most important When completed, how often updated Which version of the ontology was the mapping generated from? (20-30 provenance related properties that could be relevant) list list of most-recommended terms as a template: https://github.com/sifrproject/MOD-Ontology/blob/master/mod-v1.4_properties_template.ttl Activity manual mapping -> Activity reconciliation Inputs and outputs of activities? Mapping set activities vs mapping activities Shahim: Generic tagging mechanism users add tags k:v Suggestion: we open the \u201cother\u201d field to arbitrary json, then if we see people use something a lot, we allow promoting stuff to the top level (look at fhir as an example) James counter suggestion: open the column space and allow Qnames in there? its like Shahims suggestion just on the top level; John says look at SKOS Play convert tool it implements arbitrary triples as so you add whatever properties you want in the top row top row is actually the first row after the Column Header row, which begins with \"Identifier\" cell Thomas: While it\u2019s nice to have the ability to express complex prov (and we should think about it), the important prov files are not that complex. Minimum should be something like: Creator, creation date, algorithm,... see below \u201clist of critical (minimum) prov information\u201d John: World is changing we can assume a bit more complexity All: A short list of the critical provenance information is needed, but there should also be a mechanism to add other ecosystem-specific provenance. Versioning: We need to carefully think through versioning of mapping sets. Versioning should be similar to ontology artefacts, with version IRIs and PURLs W3id supports regex based redirects We need to introduce versioning for the SSSOM standard itself. Someway to indicate whether breaking changes were introduced Representing predicate modification: negation, inverse, direct, indirect etc https://github.com/mapping-commons/sssom/issues/40 Negative mappings (e.g., not equivalent to, not related to) have a clear use case in supporting semi-automated curation of mappings to avoid zombie mappings. We agreed adding additional syntax to SSSOM would make it less simple and likely less accessible. Two candidate solutions for including negative mappings remain: curating a controlled vocabulary of negative relationships (e.g., sssom:notEquivalentTo) OR adding a predicated modifier column. We considered parallel discussions in the LinkML community and examined the use of predicate modifiers in the Gene Ontology Annotation database. Both solutions could work, but we were hesitant to commit to one during the meeting. Mapping (clinical etc) data model elements and values https://github.com/mapping-commons/sssom/issues/43 Use cases for complex mappings https://github.com/mapping-commons/sssom/issues/61 The main outcome for this discussion was that the particpant urged to keep the Simple in SSSOM, and that any decision to capture more complex mapping cases should be driven by a veruy strong use case For the first release of the SSSOM standard, we will not worry about complex mappings Next steps Declare stable first version for SSSOM spec (September 2021) Write manuscript (September/October 2021) Dockerise all mapping related tooling, for example for generation, reconciliation, transformation etc. (December 2021) Work with OAEI to publish automated mappings more systematically in SSSOM, including better mapping justifications/curation rules (Early 2022) Work with @cmungall & @balhoff to integrate mapping reconciliation as a first-class citizen into mapping pipelines (February 2022) Extend OxO to fully support SSSOM data model (prototype SSSOM browser April 2022).","title":"1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings"},{"location":"mc2021/#1st-mapping-commons-workshop-on-simple-standard-for-sharing-ontology-mappings","text":"For a list of participants see: Wikidata: https://www.wikidata.org/wiki/Q108394519 Scholia: https://scholia.toolforge.org/event/Q108394519 In 2020, we introduced the Simple Standard for Sharing Ontology Mappings (SSSOM) as a way for the mapping community to exchange and consolidate mappings using a simple TSV format. SSSOM seeks to solve, in particular, the following problems: Standardising the mapping metadata that is necessary to drive data transformation and knowledge graph merging use cases Enable effective merging and filtering of mapping sets Standardising the representation of mapping sets across formats such as RDF/XML, JSON-LD, TSV, and others. The purpose of this 3-hour workshop: Describing current use cases to the community, and ensuring all community use cases are documented and understood Establishing a user forum for getting support and providing feedback Define a simple governance strategy for organic evolution of standard Describing a number of key open issues: The representation of complex mappings The representation of curation rules The problem of predicate modification The alignment with external standards such as PROV-O and Alignment API Defining the path to a SSSOM beta release (stable) and the rallying for the paper Resources : Overview presentation","title":"1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings"},{"location":"mc2021/#outcomes","text":"Members of the SSSOM core team are organised as as github team: https://github.com/orgs/mapping-commons/teams/sssom-core If you want to become a member, please make an issue here: https://github.com/mapping-commons/SSSOM/issues We added some of the questions asked to the new SSSOM FAQ: https://mapping-commons.github.io/sssom/faq/ Governance proposal (comments welcome): https://github.com/mapping-commons/SSSOM/issues/82 Governance will evolve over time. Standard and governance will evolve together. We will versioning (like SemVer) and should denote when backwards incompatible changes happen The 5-Star system for open FAIR mappings is now in its first official version.","title":"Outcomes"},{"location":"mc2021/#discussion-summary","text":"Ben Gyori: would be interesting to discuss beyond the format whether there's a central repository, or whether primary developers will make it as a primary export hosted along with their other artifact. Would there be a process to pull those? Nico: takes a long time for uptake of new publication systems, so this could take a long time -> maybe better to promote on an ontology level. Could also have the side benefit of providing a point of introspection John G: I totally would want BioPortal to be capable of managing the RDF produced from SSSOM resources, and for Bioportal to be a mapping resource and not simply an ontology resource. I suspect the RDF patterns that SSSOM is defining are the gold we'll need for that gold standard for exchanging mappings. Uploading the RDF files can trivially be done in a naive way of course, but integrating that RDF knowledge into Bioportal to make them maximally useful as a separate kind of resource is obviously 'real work' (and so schedules are unknowable). John: how dependent is the library on the software itself? Is it an exchange principle? Nico: LinkML has the advantage that it gets JSON and TTL outputs for free if we use it. Would also be advantageous if more people used this standard for metamodeling to create similar outputs for different modeling Charlie: using \"frontmatter\" format for SSSOM TSV files, like how github is using frontmatter in Jekyll (ref: https://blog.datacite.org/using-yaml-frontmatter-with-csv/) (http://csvy.org/) John G: Analogous to frontmatter format, I keep being drawn to the SKOS Play format as an alternate (but I think TTL-compatible) format for the SSSOM content. How bad would that be? (I can create a ticket) Charlie: Requirements for a default JSON-LD context (e.g., prefix -> URL prefix mapping) How should it be maintained? Should it continue to be manually curated, or is an automated export from something like the Bioregistry a good idea? If it's automatically exported from the Bioregistry, what kinds of interactions might users want to have via the Bioregistry issue tracker to propose improvements? Similarly, we can make tutorials for directly creating PRs. Charlie: How prefixes should be stylized/what is the business logic/decision tree for using OBO Library PURLs, Identifiers.org URLs, Bioregistry URLs, first-party provider URLs, etc. based on what's available and mapped between various first-party providers, third-party providers (e.g., ChemSpider InChI resolver), and meta-providers (e.g., Identifiers.org, OntoBee)? This is both a concern for \"best practices\" in SSSOM defining a custom context and also when using or extending the default context. Charlie: How to represent mappings where the curator is unsure if the relation is correct or not? This happens often when curating equivalences, e.g., in Biomappings https://github.com/biomappings/biomappings/blob/master/src/biomappings/resources/unsure.tsv Tiffany: Is it important to know why someone feels more or less confident about a mapping? If so, is there also a way to include that in the measure of \u201cconfidence\u201d? Sue: In practice I\u2019ve tended to add comments when I am uncertain and have questions. Possibly this could be formalized? Davera clinical use case discussion: Overall issue: mapping sets of things to a term is a goal for clinical mappings mapping recommendations/rational exercise staging and diagnosis information (like stage 1 or stage 2 of a given cancer) Select a set of stages - this is challenging wrt mappings Different kinds of scales describing the same thing are hard/sometimes not \"kosher\" to mix Phenotypes rely on capturing human-readable data on the decision logic of how mappings are applied by standards implementation team Proposed to look at the HL7 Implementation profiles as a way to incorporate an approach to this complex mapping challenge Melissa: rename SSSOM to Slytherin Standard. Charlie 100% supports this (Tiffany: +1; Alex +1) Kristin also likes this. John used it. John G: Ontology repositories are mappings-motivated, to both provide to users good mappings, and to provide good ways for users or managers to ingest, manage, apply, and create mapping knowledge. Ontology repositories are presumably also capable of storing mappings in their semantic (RDF-equivalent) format. With this in mind, is the concept of a \"mapping server\" equivalent, complementary, or antagonistic to the existing ontology repositories? John G: Need to consider identification and versioning of the mapping artifacts. It's one thing to say \"We have all the mapping artifacts and we are giving those out\", but (just like ontologies) citing a mapping artifact requires that you have a unique identifier for that artifact, and that the identifier incorporates the fact the artifact may have multiple versions. Ideally the SSSOM artifacts (like ontologies) would (a) be accessible in a defined format at the identifier IRI, (b) include their identifiers within the SSMOC artifact. I am thinking that an SSMOC is inherently a semantic artifact, and therefore it should follow semantic namespace declaration principles in this regard. Julie: W3id supports regex based redirects (for purls)","title":"Discussion summary"},{"location":"mc2021/#breakout-sessions","text":"","title":"Breakout sessions"},{"location":"mc2021/#curation-rules-documenting-the-decision-rules-on-how-a-mapping-was-determined","text":"Effective definition of inclusion criteria/exclusion criteria: Inclusion example: Two ontologies saying I created exact mappings that they have a string match or a string match to a synonym + an xref Exclusion example: Only matched on an acronym Match types Cover partial string matches Other documentation criteria to distinguish exact from narrow/broad - how exact is exact Line between close/narrow/broad Direction of narrow and broad DOS: I'd favor manual mapping be done on definitions + context in ontology, leaving lexical mappings to machines. What metadata could we add to the header to make clear criteria used? One thing it might be useful to record is whether ontology context (relationships & location in classification) of mapped terms was used (Some ontologies/taxonomies have poor quality graphs but high quality term definitions.) Source string match to target (lexical exact, stem, word [synonym and type]) - need for both source and target, how to synonyms fit in Needs: Generalized patterns that relate file header information to row-level information Need more expressivity in the match type Inclusion and exclusion criteria Best practices guide Algorithm/tool/similarity measure for computationally derived mappings Specificity with respect to the parent concept or portion of the hierarchy that the concept is from","title":"Curation rules: documenting the decision rules on how a mapping was determined"},{"location":"mc2021/#mapping-provenance-and-alignment-with-external-provenance-standards","text":"Problems: We need to distinguish original and derived mappings We need to somehow \u201cencode\u201d how a derived mapping was created (for example through a walk USeful to capture as part of the PROV activity agents (wasAssociatedWith some) mapping tool creator algorithms semantic similarity etc Why provenance: \u201ci dont trust mappings from source x..\u201d Who did it? What tools were used? - are the most important When completed, how often updated Which version of the ontology was the mapping generated from? (20-30 provenance related properties that could be relevant) list list of most-recommended terms as a template: https://github.com/sifrproject/MOD-Ontology/blob/master/mod-v1.4_properties_template.ttl Activity manual mapping -> Activity reconciliation Inputs and outputs of activities? Mapping set activities vs mapping activities Shahim: Generic tagging mechanism users add tags k:v Suggestion: we open the \u201cother\u201d field to arbitrary json, then if we see people use something a lot, we allow promoting stuff to the top level (look at fhir as an example) James counter suggestion: open the column space and allow Qnames in there? its like Shahims suggestion just on the top level; John says look at SKOS Play convert tool it implements arbitrary triples as so you add whatever properties you want in the top row top row is actually the first row after the Column Header row, which begins with \"Identifier\" cell Thomas: While it\u2019s nice to have the ability to express complex prov (and we should think about it), the important prov files are not that complex. Minimum should be something like: Creator, creation date, algorithm,... see below \u201clist of critical (minimum) prov information\u201d John: World is changing we can assume a bit more complexity All: A short list of the critical provenance information is needed, but there should also be a mechanism to add other ecosystem-specific provenance. Versioning: We need to carefully think through versioning of mapping sets. Versioning should be similar to ontology artefacts, with version IRIs and PURLs W3id supports regex based redirects We need to introduce versioning for the SSSOM standard itself. Someway to indicate whether breaking changes were introduced","title":"Mapping provenance and alignment with external provenance standards"},{"location":"mc2021/#representing-predicate-modification-negation-inverse-direct-indirect-etc","text":"https://github.com/mapping-commons/sssom/issues/40 Negative mappings (e.g., not equivalent to, not related to) have a clear use case in supporting semi-automated curation of mappings to avoid zombie mappings. We agreed adding additional syntax to SSSOM would make it less simple and likely less accessible. Two candidate solutions for including negative mappings remain: curating a controlled vocabulary of negative relationships (e.g., sssom:notEquivalentTo) OR adding a predicated modifier column. We considered parallel discussions in the LinkML community and examined the use of predicate modifiers in the Gene Ontology Annotation database. Both solutions could work, but we were hesitant to commit to one during the meeting.","title":"Representing predicate modification: negation, inverse, direct, indirect etc"},{"location":"mc2021/#mapping-clinical-etc-data-model-elements-and-values","text":"https://github.com/mapping-commons/sssom/issues/43","title":"Mapping (clinical etc) data model elements and values"},{"location":"mc2021/#use-cases-for-complex-mappings","text":"https://github.com/mapping-commons/sssom/issues/61 The main outcome for this discussion was that the particpant urged to keep the Simple in SSSOM, and that any decision to capture more complex mapping cases should be driven by a veruy strong use case For the first release of the SSSOM standard, we will not worry about complex mappings","title":"Use cases for complex mappings"},{"location":"mc2021/#next-steps","text":"Declare stable first version for SSSOM spec (September 2021) Write manuscript (September/October 2021) Dockerise all mapping related tooling, for example for generation, reconciliation, transformation etc. (December 2021) Work with OAEI to publish automated mappings more systematically in SSSOM, including better mapping justifications/curation rules (Early 2022) Work with @cmungall & @balhoff to integrate mapping reconciliation as a first-class citizen into mapping pipelines (February 2022) Extend OxO to fully support SSSOM data model (prototype SSSOM browser April 2022).","title":"Next steps"},{"location":"metadata_element/","text":"Slot: metadata_element All legal SSSOM metadata elements are subproperties of this. URI: sssom:metadata_element Domain and Range None \u2192 0..1 String Parents Children Used by","title":"Slot: metadata_element"},{"location":"metadata_element/#slot-metadata_element","text":"All legal SSSOM metadata elements are subproperties of this. URI: sssom:metadata_element","title":"Slot: metadata_element"},{"location":"metadata_element/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"metadata_element/#parents","text":"","title":"Parents"},{"location":"metadata_element/#children","text":"","title":"Children"},{"location":"metadata_element/#used-by","text":"","title":"Used by"},{"location":"object_category/","text":"Slot: object_category The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. URI: sssom:object_category Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='UBERON:0001062', description='(The CURIE of the Uberon term for \"anatomical entity\".)') Example(value='biolink:Gene', description='(The CURIE of the biolink class for genes.)')","title":"Slot: object_category"},{"location":"object_category/#slot-object_category","text":"The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. URI: sssom:object_category","title":"Slot: object_category"},{"location":"object_category/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"object_category/#parents","text":"","title":"Parents"},{"location":"object_category/#children","text":"","title":"Children"},{"location":"object_category/#used-by","text":"Mapping","title":"Used by"},{"location":"object_category/#other-properties","text":"Examples: Example(value='UBERON:0001062', description='(The CURIE of the Uberon term for \"anatomical entity\".)') Example(value='biolink:Gene', description='(The CURIE of the biolink class for genes.)')","title":"Other properties"},{"location":"object_id/","text":"Slot: object_id The ID of the object of the mapping. URI: sssom:object_id Domain and Range None \u2192 1..1 EntityReference Parents Children Used by Mapping Other properties Mappings: owl:annotatedTarget owl:annotatedTarget Examples: Example(value='HP:0009894', description=\"The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears'\")","title":"Slot: object_id"},{"location":"object_id/#slot-object_id","text":"The ID of the object of the mapping. URI: sssom:object_id","title":"Slot: object_id"},{"location":"object_id/#domain-and-range","text":"None \u2192 1..1 EntityReference","title":"Domain and Range"},{"location":"object_id/#parents","text":"","title":"Parents"},{"location":"object_id/#children","text":"","title":"Children"},{"location":"object_id/#used-by","text":"Mapping","title":"Used by"},{"location":"object_id/#other-properties","text":"Mappings: owl:annotatedTarget owl:annotatedTarget Examples: Example(value='HP:0009894', description=\"The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears'\")","title":"Other properties"},{"location":"object_label/","text":"Slot: object_label The label of object of the mapping URI: sssom:object_label Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='Thickened ears', description=None)","title":"Slot: object_label"},{"location":"object_label/#slot-object_label","text":"The label of object of the mapping URI: sssom:object_label","title":"Slot: object_label"},{"location":"object_label/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"object_label/#parents","text":"","title":"Parents"},{"location":"object_label/#children","text":"","title":"Children"},{"location":"object_label/#used-by","text":"Mapping","title":"Used by"},{"location":"object_label/#other-properties","text":"Examples: Example(value='Thickened ears', description=None)","title":"Other properties"},{"location":"object_match_field/","text":"Slot: object_match_field A tuple of fields (term annotations on the object) that was used for the match. URI: sssom:object_match_field Domain and Range None \u2192 0..* EntityReference Parents Children Used by Mapping MappingSet","title":"Slot: object_match_field"},{"location":"object_match_field/#slot-object_match_field","text":"A tuple of fields (term annotations on the object) that was used for the match. URI: sssom:object_match_field","title":"Slot: object_match_field"},{"location":"object_match_field/#domain-and-range","text":"None \u2192 0..* EntityReference","title":"Domain and Range"},{"location":"object_match_field/#parents","text":"","title":"Parents"},{"location":"object_match_field/#children","text":"","title":"Children"},{"location":"object_match_field/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"object_preprocessing/","text":"Slot: object_preprocessing Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. URI: sssom:object_preprocessing Domain and Range None \u2192 0..* preprocessing_method_enum Parents Children Used by Mapping MappingSet","title":"Slot: object_preprocessing"},{"location":"object_preprocessing/#slot-object_preprocessing","text":"Method of preprocessing applied to the fields of the object. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. URI: sssom:object_preprocessing","title":"Slot: object_preprocessing"},{"location":"object_preprocessing/#domain-and-range","text":"None \u2192 0..* preprocessing_method_enum","title":"Domain and Range"},{"location":"object_preprocessing/#parents","text":"","title":"Parents"},{"location":"object_preprocessing/#children","text":"","title":"Children"},{"location":"object_preprocessing/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"object_source/","text":"Slot: object_source IRI of ontology source for the object. Version IRI preferred. URI: sssom:object_source Domain and Range None \u2192 0..1 Uri Parents Children Used by Mapping MappingSet Other properties Examples: Example(value='http://purl.obolibrary.org/obo/mondo.owl', description='(A persistent IRI pointing to the latest version of the Mondo ontology.)')","title":"Slot: object_source"},{"location":"object_source/#slot-object_source","text":"IRI of ontology source for the object. Version IRI preferred. URI: sssom:object_source","title":"Slot: object_source"},{"location":"object_source/#domain-and-range","text":"None \u2192 0..1 Uri","title":"Domain and Range"},{"location":"object_source/#parents","text":"","title":"Parents"},{"location":"object_source/#children","text":"","title":"Children"},{"location":"object_source/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"object_source/#other-properties","text":"Examples: Example(value='http://purl.obolibrary.org/obo/mondo.owl', description='(A persistent IRI pointing to the latest version of the Mondo ontology.)')","title":"Other properties"},{"location":"object_source_version/","text":"Slot: object_source_version Version IRI or version string of the source of the object term. URI: sssom:object_source_version Domain and Range None \u2192 0..1 String Parents Children Used by Mapping MappingSet Other properties Examples: Example(value='http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl', description=\"(A persistent Version IRI pointing to the Mondo version '2021-01-30')\")","title":"Slot: object_source_version"},{"location":"object_source_version/#slot-object_source_version","text":"Version IRI or version string of the source of the object term. URI: sssom:object_source_version","title":"Slot: object_source_version"},{"location":"object_source_version/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"object_source_version/#parents","text":"","title":"Parents"},{"location":"object_source_version/#children","text":"","title":"Children"},{"location":"object_source_version/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"object_source_version/#other-properties","text":"Examples: Example(value='http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl', description=\"(A persistent Version IRI pointing to the Mondo version '2021-01-30')\")","title":"Other properties"},{"location":"other/","text":"Slot: other Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. URI: sssom:other Domain and Range None \u2192 0..1 String Parents Children Used by Mapping MappingSet","title":"Slot: other"},{"location":"other/#slot-other","text":"Pipe separated list of key value pairs for properties not part of the SSSOM spec. Can be used to encode additional provenance data. URI: sssom:other","title":"Slot: other"},{"location":"other/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"other/#parents","text":"","title":"Parents"},{"location":"other/#children","text":"","title":"Children"},{"location":"other/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"predicate_id/","text":"Slot: predicate_id The ID of the predicate or relation that relates the subject and object of this match. URI: sssom:predicate_id Domain and Range None \u2192 1..1 EntityReference Parents Children Used by Mapping Other properties Mappings: owl:annotatedProperty owl:annotatedProperty Examples: Example(value='skos:exactMatch', description=None)","title":"Slot: predicate_id"},{"location":"predicate_id/#slot-predicate_id","text":"The ID of the predicate or relation that relates the subject and object of this match. URI: sssom:predicate_id","title":"Slot: predicate_id"},{"location":"predicate_id/#domain-and-range","text":"None \u2192 1..1 EntityReference","title":"Domain and Range"},{"location":"predicate_id/#parents","text":"","title":"Parents"},{"location":"predicate_id/#children","text":"","title":"Children"},{"location":"predicate_id/#used-by","text":"Mapping","title":"Used by"},{"location":"predicate_id/#other-properties","text":"Mappings: owl:annotatedProperty owl:annotatedProperty Examples: Example(value='skos:exactMatch', description=None)","title":"Other properties"},{"location":"predicate_label/","text":"Slot: predicate_label The label of the predicate/relation of the mapping URI: sssom:predicate_label Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='owl:sameAs', description='The subject and the object are instances (owl individuals), and the two instances are the same.') Example(value='owl:equivalentClass', description='The subject and the object are classes (owl class), and the two classes are the same.') Example(value='owl:equivalentProperty', description='The subject and the object are properties (owl object, data, annotation properties), and the two properties are the same.') Example(value='rdfs:subClassOf', description='The subject and the object are classes (owl class), and the subject is a subclass of the object.') Example(value='rdfs:subPropertyOf', description='The subject and the object are properties (owl object, data, annotation properties), and the subject is a subproperty of the object.') Example(value='skos:relatedMatch', description='The subject and the object are associated in some unspecified way.') Example(value='skos:closeMatch', description='The subject and the object are sufficiently similar that they can be used interchangeably in some information retrieval applications.') Example(value='skos:exactMatch', description='The subject and the object can, with a high degree of confidence, be used interchangeably across a wide range of information retrieval applications.') Example(value='skos:narrowMatch', description='From the SKOS primer: A triple skos:narrower (and skos:narrowMatch) asserts that , the object of the triple, is a narrower concept than , the subject of the triple.') Example(value='skos:broadMatch', description='From the SKOS primer: A triple skos:broader (and skos:broadMatch) asserts that , the object of the triple, is a broader concept than , the subject of the triple.') Example(value='oio:database_cross_reference', description='Two terms are related in some way. The meaning is frequently consistent across a single set of mappings. Note this property is often overloaded even where the terms are of a different nature (e.g. interpro2go)') Example(value='rdfs:seeAlso', description='The subject and the object are associated in some unspecified way. The object IRI often resolves to a resource on the web that provides additional information.')","title":"Slot: predicate_label"},{"location":"predicate_label/#slot-predicate_label","text":"The label of the predicate/relation of the mapping URI: sssom:predicate_label","title":"Slot: predicate_label"},{"location":"predicate_label/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"predicate_label/#parents","text":"","title":"Parents"},{"location":"predicate_label/#children","text":"","title":"Children"},{"location":"predicate_label/#used-by","text":"Mapping","title":"Used by"},{"location":"predicate_label/#other-properties","text":"Examples: Example(value='owl:sameAs', description='The subject and the object are instances (owl individuals), and the two instances are the same.') Example(value='owl:equivalentClass', description='The subject and the object are classes (owl class), and the two classes are the same.') Example(value='owl:equivalentProperty', description='The subject and the object are properties (owl object, data, annotation properties), and the two properties are the same.') Example(value='rdfs:subClassOf', description='The subject and the object are classes (owl class), and the subject is a subclass of the object.') Example(value='rdfs:subPropertyOf', description='The subject and the object are properties (owl object, data, annotation properties), and the subject is a subproperty of the object.') Example(value='skos:relatedMatch', description='The subject and the object are associated in some unspecified way.') Example(value='skos:closeMatch', description='The subject and the object are sufficiently similar that they can be used interchangeably in some information retrieval applications.') Example(value='skos:exactMatch', description='The subject and the object can, with a high degree of confidence, be used interchangeably across a wide range of information retrieval applications.') Example(value='skos:narrowMatch', description='From the SKOS primer: A triple skos:narrower (and skos:narrowMatch) asserts that , the object of the triple, is a narrower concept than , the subject of the triple.') Example(value='skos:broadMatch', description='From the SKOS primer: A triple skos:broader (and skos:broadMatch) asserts that , the object of the triple, is a broader concept than , the subject of the triple.') Example(value='oio:database_cross_reference', description='Two terms are related in some way. The meaning is frequently consistent across a single set of mappings. Note this property is often overloaded even where the terms are of a different nature (e.g. interpro2go)') Example(value='rdfs:seeAlso', description='The subject and the object are associated in some unspecified way. The object IRI often resolves to a resource on the web that provides additional information.')","title":"Other properties"},{"location":"predicate_modifier/","text":"Slot: predicate_modifier A modifier for negating the prediate. See https://github.com/mapping-commons/sssom/issues/40 for discussion URI: sssom:predicate_modifier Domain and Range None \u2192 0..1 predicate_modifier_enum Parents Children Used by Mapping Other properties Examples: Example(value='Not', description='Negates the predicate, see documentation of predicate_modifier_enum')","title":"Slot: predicate_modifier"},{"location":"predicate_modifier/#slot-predicate_modifier","text":"A modifier for negating the prediate. See https://github.com/mapping-commons/sssom/issues/40 for discussion URI: sssom:predicate_modifier","title":"Slot: predicate_modifier"},{"location":"predicate_modifier/#domain-and-range","text":"None \u2192 0..1 predicate_modifier_enum","title":"Domain and Range"},{"location":"predicate_modifier/#parents","text":"","title":"Parents"},{"location":"predicate_modifier/#children","text":"","title":"Children"},{"location":"predicate_modifier/#used-by","text":"Mapping","title":"Used by"},{"location":"predicate_modifier/#other-properties","text":"Examples: Example(value='Not', description='Negates the predicate, see documentation of predicate_modifier_enum')","title":"Other properties"},{"location":"predicate_modifier_enum/","text":"Enum: predicate_modifier_enum URI: sssom:predicate_modifier_enum Other properties Permissible Values Text Description Meaning Other Information Not Negating the mapping predicate. The meaning of the triple becomes subject_id is not a predicate_id match to object_id.","title":"Enum: predicate_modifier_enum"},{"location":"predicate_modifier_enum/#enum-predicate_modifier_enum","text":"URI: sssom:predicate_modifier_enum","title":"Enum: predicate_modifier_enum"},{"location":"predicate_modifier_enum/#other-properties","text":"","title":"Other properties"},{"location":"predicate_modifier_enum/#permissible-values","text":"Text Description Meaning Other Information Not Negating the mapping predicate. The meaning of the triple becomes subject_id is not a predicate_id match to object_id.","title":"Permissible Values"},{"location":"preprocessing_method_enum/","text":"Enum: preprocessing_method_enum URI: sssom:preprocessing_method_enum Other properties Permissible Values Text Description Meaning Other Information Stemming TaxonRestrictionRemoval","title":"Enum: preprocessing_method_enum"},{"location":"preprocessing_method_enum/#enum-preprocessing_method_enum","text":"URI: sssom:preprocessing_method_enum","title":"Enum: preprocessing_method_enum"},{"location":"preprocessing_method_enum/#other-properties","text":"","title":"Other properties"},{"location":"preprocessing_method_enum/#permissible-values","text":"Text Description Meaning Other Information Stemming TaxonRestrictionRemoval","title":"Permissible Values"},{"location":"presentations/","text":"Presentations WSBO-2021: Workshop on Synergizing Biomedical Ontologies Workshop info: https://github.com/OntoloBridge/WSBO/ MC-2021: 1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings Workshop info . Slides Introduction Slides OMOP2OBO . OMOP2OBO uses embeddings to propose mappings but also provides explanations based on direct mappings, hierarchical mappings.","title":"Presentations"},{"location":"presentations/#presentations","text":"","title":"Presentations"},{"location":"presentations/#wsbo-2021-workshop-on-synergizing-biomedical-ontologies","text":"Workshop info: https://github.com/OntoloBridge/WSBO/","title":"WSBO-2021: Workshop on Synergizing Biomedical Ontologies"},{"location":"presentations/#mc-2021-1st-mapping-commons-workshop-on-simple-standard-for-sharing-ontology-mappings","text":"Workshop info . Slides Introduction Slides OMOP2OBO . OMOP2OBO uses embeddings to propose mappings but also provides explanations based on direct mappings, hierarchical mappings.","title":"MC-2021: 1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings"},{"location":"publication_date/","text":"Slot: publication_date The date the mapping was published. This is different from the date the mapping was asserted. URI: sssom:publication_date Domain and Range None \u2192 0..1 Date Parents Children Used by Other properties Mappings: dc:created","title":"Slot: publication_date"},{"location":"publication_date/#slot-publication_date","text":"The date the mapping was published. This is different from the date the mapping was asserted. URI: sssom:publication_date","title":"Slot: publication_date"},{"location":"publication_date/#domain-and-range","text":"None \u2192 0..1 Date","title":"Domain and Range"},{"location":"publication_date/#parents","text":"","title":"Parents"},{"location":"publication_date/#children","text":"","title":"Children"},{"location":"publication_date/#used-by","text":"","title":"Used by"},{"location":"publication_date/#other-properties","text":"Mappings: dc:created","title":"Other properties"},{"location":"rdf_example/","text":"Slot: rdf_example An example value of the a SSSOM element in the TSV file. URI: sssom:rdf_example Domain and Range None \u2192 0..1 String Parents Children Used by","title":"Slot: rdf_example"},{"location":"rdf_example/#slot-rdf_example","text":"An example value of the a SSSOM element in the TSV file. URI: sssom:rdf_example","title":"Slot: rdf_example"},{"location":"rdf_example/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"rdf_example/#parents","text":"","title":"Parents"},{"location":"rdf_example/#children","text":"","title":"Children"},{"location":"rdf_example/#used-by","text":"","title":"Used by"},{"location":"reviewer_id/","text":"Slot: reviewer_id Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. URI: sssom:reviewer_id Domain and Range None \u2192 0..* EntityReference Parents Children Used by Mapping","title":"Slot: reviewer_id"},{"location":"reviewer_id/#slot-reviewer_id","text":"Identifies the persons or groups that reviewed and confirmed the mapping. Recommended to be a (pipe-separated) list of ORCIDs or otherwise identifying URLs, but any identifying string (such as name and affiliation) is permissible. URI: sssom:reviewer_id","title":"Slot: reviewer_id"},{"location":"reviewer_id/#domain-and-range","text":"None \u2192 0..* EntityReference","title":"Domain and Range"},{"location":"reviewer_id/#parents","text":"","title":"Parents"},{"location":"reviewer_id/#children","text":"","title":"Children"},{"location":"reviewer_id/#used-by","text":"Mapping","title":"Used by"},{"location":"reviewer_label/","text":"Slot: reviewer_label A string identifying the reviewer of this mapping. In the spirit of provenance, consider to use author_id instead. URI: sssom:reviewer_label Domain and Range None \u2192 0..* String Parents Children Used by Mapping","title":"Slot: reviewer_label"},{"location":"reviewer_label/#slot-reviewer_label","text":"A string identifying the reviewer of this mapping. In the spirit of provenance, consider to use author_id instead. URI: sssom:reviewer_label","title":"Slot: reviewer_label"},{"location":"reviewer_label/#domain-and-range","text":"None \u2192 0..* String","title":"Domain and Range"},{"location":"reviewer_label/#parents","text":"","title":"Parents"},{"location":"reviewer_label/#children","text":"","title":"Children"},{"location":"reviewer_label/#used-by","text":"Mapping","title":"Used by"},{"location":"scope/","text":"Slot: scope Indicates whether the metadata element has local, global or local-global scope. URI: sssom:scope Domain and Range None \u2192 0..1 String Parents Children Used by","title":"Slot: scope"},{"location":"scope/#slot-scope","text":"Indicates whether the metadata element has local, global or local-global scope. URI: sssom:scope","title":"Slot: scope"},{"location":"scope/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"scope/#parents","text":"","title":"Parents"},{"location":"scope/#children","text":"","title":"Children"},{"location":"scope/#used-by","text":"","title":"Used by"},{"location":"see_also/","text":"Slot: see_also A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment URI: sssom:see_also Domain and Range None \u2192 0..* String Parents Children Used by Mapping MappingSet Other properties Mappings: rdfs:seeAlso","title":"Slot: see_also"},{"location":"see_also/#slot-see_also","text":"A URL specific for the mapping instance. E.g. for kboom we have a per-mapping image that shows surrounding axioms that drive probability. Could also be a github issue URL that discussed a complicated alignment URI: sssom:see_also","title":"Slot: see_also"},{"location":"see_also/#domain-and-range","text":"None \u2192 0..* String","title":"Domain and Range"},{"location":"see_also/#parents","text":"","title":"Parents"},{"location":"see_also/#children","text":"","title":"Children"},{"location":"see_also/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"see_also/#other-properties","text":"Mappings: rdfs:seeAlso","title":"Other properties"},{"location":"semantic_similarity_measure/","text":"Slot: semantic_similarity_measure The measure used for computing the the semantic similarity score. To make processing this field as unambiguous as possible, we recommend using wikidata identifiers, but wikipedia pages could also be acceptable. URI: sssom:semantic_similarity_measure Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='https://www.wikidata.org/wiki/Q865360', description='(the Wikidata identifier for the Jaccard index measure).')","title":"Slot: semantic_similarity_measure"},{"location":"semantic_similarity_measure/#slot-semantic_similarity_measure","text":"The measure used for computing the the semantic similarity score. To make processing this field as unambiguous as possible, we recommend using wikidata identifiers, but wikipedia pages could also be acceptable. URI: sssom:semantic_similarity_measure","title":"Slot: semantic_similarity_measure"},{"location":"semantic_similarity_measure/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"semantic_similarity_measure/#parents","text":"","title":"Parents"},{"location":"semantic_similarity_measure/#children","text":"","title":"Children"},{"location":"semantic_similarity_measure/#used-by","text":"Mapping","title":"Used by"},{"location":"semantic_similarity_measure/#other-properties","text":"Examples: Example(value='https://www.wikidata.org/wiki/Q865360', description='(the Wikidata identifier for the Jaccard index measure).')","title":"Other properties"},{"location":"semantic_similarity_score/","text":"Slot: semantic_similarity_score A score between 0 and 1 to denote the semantic similarity, where 1 denotes equivalence. URI: sssom:semantic_similarity_score Domain and Range None \u2192 0..1 Double Parents Children Used by Mapping","title":"Slot: semantic_similarity_score"},{"location":"semantic_similarity_score/#slot-semantic_similarity_score","text":"A score between 0 and 1 to denote the semantic similarity, where 1 denotes equivalence. URI: sssom:semantic_similarity_score","title":"Slot: semantic_similarity_score"},{"location":"semantic_similarity_score/#domain-and-range","text":"None \u2192 0..1 Double","title":"Domain and Range"},{"location":"semantic_similarity_score/#parents","text":"","title":"Parents"},{"location":"semantic_similarity_score/#children","text":"","title":"Children"},{"location":"semantic_similarity_score/#used-by","text":"Mapping","title":"Used by"},{"location":"spec/","text":"Simple Standard for Sharing Ontology Mappings (SSSOM) Development Draft (under construction: some metadata fields may be subject to change) Editors: Nicolas Matentzoglu (Semanticly Ltd; @matentzn ) Chris Mungall (LBL) Ernesto Jimenez-Ruiz (City, University of London) John Graybeal (Stanford) William Duncan (LBL) David Osumi-Sutherland (EMBL-EBI) Simon Jupp (SciBite) James McLaughlin (EMBL-EBI) Henriette Harmse (EMBL-EBI) Tiffany Callahan ( @callahantiff ) Charlie Hoyt (Harvard Medical School; @cthoyt ) Thomas Liener (Pistoia Alliance) Harshad Hegde (LBL) Contributors: Alasdair Gray Alex Wagner Amelia L. Hoyt Andrew Williams Anne Thessen Benjamin M. Gyori Bill Baumgartner Christopher Chute Chris T. Evelo Damion Dooley Davera Gabriel Harold Solbrig HyeongSik Kim Ian Harrow James Malone James Overton James P. Balhoff James Stevenson Jiao Dahzi Joe Flack Jooho Lee Julie McMurry Kori Kuzma Kristin Kostka Lauren Chan Melissa Haendel Monica Munoz-Torres Nicole Vasilevsky Nomi Harris N\u00faria Queralt-Rosinach Sabrina Toro Sebastian Koehler Shahim Essaid Sierra Moxon Sue Bello Tim Putman Quick links : SSSOM on Wikidata SSSOM Python toolkit on Wikidata SSSOM Python toolkit: Official Documentation Presentations Abstract Mappings, or cross-references, are used to link terms across different ontologies. However, there is currently little to no standardisation in how such mappings are represented. While properties such as hasDbXref property are widely used in ontologies such as GO and MONDO, the meaning of such mappings is unclear, and cannot be further described with additional metadata or provenance. The Simple Standard for Sharing Ontology Mappings (SSSOM) is an initiative to provide a minimal and standard set of elements for the dissemination of mappings between ontology terms, to ensure a reliable interpretation of generated mappings and to enable sharing and data integration between people and applications. This document introduces the SSSOM catalog of metadata elements, which can be used to attach meta- and provenance data to both mappings and sets of mappings; a controlled vocabulary for the description of match types (SSSOM CV); a definition of both RDF and TSV serialisations of ontology mappings; and a (non-exhaustive) selection of recommended mapping predicates. Table of Contents Introduction SSSOM Metadata Elements SSSOM Common Predicates SSSOM Serialisation SSSOM Use Cases SSSOM 5-Star recommendation for mappings Introduction Currently, there are three methods typically used to express mappings in OWL: direct logical axioms using owl:equivalentClass; the oboInOwl hasDbXref property; and the SKOS vocabulary for mapping properties. The first, owl:equivalentClass, is a strong logical equivalence assertion which is not appropriate for more nuanced mappings such as close matches. The second, hasDbXref, does not assert formal logical equivalence but also has no clearly defined meaning. Finally, the SKOS vocabulary provides a hierarchy of mapping properties which allow the unambigous specification of exact, close, broad, and narrow matches, but does not provide the means for mappings to be annotated with additional metadata such as confidence scores and provenance. The Simple Standard for Sharing Ontology Mappings (SSSOM) addresses these problems by defining a catalog of metadata terms to describe mappings. Both individual mappings and sets of mappings can be described, enabling provenance and metadata to be captured on multiple levels. SSSOM interoperates with existing methods for the specification of mappings, allowing any predicate to be used to describe the nature of each mapping including those from OWL and SKOS. The provenance of mappings - such as whether the mapping was created as the result of a human-curated equivalence match, or a semantic similarity match - is specified using a controlled vocabulary (CV), SSSOM CV. Combined with the metadata properties provided by SSSOM such as confidence and semantic_similarity_score, this provenance information can be used to capture mapping descriptions in a manner that is explicit and amenable to curation. Two serialisations for SSSOM mappings are provided in this document, aimed at different communities: an RDF/OWL serialisation using IRIs that is aimed at the Knowledge Graph/Semantic Web community, and a TSV serialisation using CURIE syntax which is aimed at the wider bioinformatics community. An unambiguous translation between these serialisations is provided. Some notes on the standardisation process: Note this is a public copy of the editors\u2019 draft. It is provided for discussion only and may change at any moment. Do not cite this document other than as work in progress. SSSOM is community-driven, so all feedback is welcome. SSSOM Metadata Elements The SSSOM specification defines a set of SSSOM metadata elements that are used to describe mappings. Apart from the elements themselves, some example usage and a description, the SSSOM spec defines the canonical order for the metadatdata in which the elements should appear when serialised. This precludes spurious diffs in a git setting, which is an important concern for the continuous reviewing of mappings by curators and users. A \"term\" is defined in a controlled vocabulary / ontology, and usually corresponds to a class, an individual or a property (entity in OWL, concept in SKOS, resource in RDF). The \"subject\" is the term on the left side of the mapping, and the \"object\" is the term on the right side of the mapping. A \"predicate\" relates the subject with the object and is typically an annotation or object property. A \"mapping set\" is a set of mappings that can be shared using the SSSOM standard. The conceptual model of SSSOM has two main elements: a Mapping and a MappingSet . Some SSSOM metadata elements apply only to one element or the other, but many can be applied to both. Note that some SSSOM metadata elements have known equivalent properties which will be used in the RDF serialisation, for example see_also is mapped to rdfs:seeAlso . All metadata elements and their mappings are declared and managed in the SSSOM schema . Metadata Elements The latest version of the metadata elements are: Mapping MappingSet Common Mapping Predicates The use of predicates is not restricted by SSSOM, but for maximum re-use, the following predicates are strongly encouraged. Sources: https://www.bioontology.org/wiki/BioPortal_Mappings Predicate Description owl:sameAs The subject and the object are instances (owl individuals), and the two instances are the same. owl:equivalentClass The subject and the object are classes (owl class), and the two classes are the same. owl:equivalentProperty The subject and the object are properties (owl object, data, annotation properties), and the two properties are the same. rdfs:subClassOf The subject and the object are classes (owl class), and the subject is a subclass of the object. rdfs:subPropertyOf The subject and the object are properties (owl object, data, annotation properties), and the subject is a subproperty of the object. skos:relatedMatch The subject and the object are associated in some unspecified way. skos:closeMatch The subject and the object are sufficiently similar that they can be used interchangeably in some information retrieval applications. skos:exactMatch The subject and the object can, with a high degree of confidence, be used interchangeably across a wide range of information retrieval applications. skos:narrowMatch From the SKOS primer: A triple skos:narrower (and skos:narrowMatch) asserts that , the object of the triple, is a narrower concept than , the subject of the triple. skos:broadMatch From the SKOS primer: A triple skos:broader (and skos:broadMatch) asserts that , the object of the triple, is a broader concept than , the subject of the triple. oio:database_cross_reference Two terms are related in some way. The meaning is frequently consistent across a single set of mappings. Note this property is often overloaded even where the terms are of a different nature (e.g. interpro2go) rdfs:seeAlso The subject and the object are associated in some unspecified way. The object IRI often resolves to a resource on the web that provides additional information. RO:? Any Relation in the Relation Ontology (RO). Serialisation RDF/XML serialised re-ified OWL axioms: The default RDFXML serialisation of the mappings will be realised as reified OWL axioms . This has the advantage that any mapping set can be simply merged with an ontology in the usual way, for example using ROBOT merge . We will deal with three types of reified OWL-axioms, and a few sub-types: Predicate is an annotation property Predicate is an object property and Object/Subject are classes Object/Subject are individuals Predicate is language relational construct of RDFS or OWL (rdfs:subClassOf, owl:equivalentClass) Predicate is an annotation property: If the predicate corresponds to an annotation property, the mapping gets converted to an OWLAnnotationAssertion axiom: OWLAnnotationAssertion(P,S,O) . All mapping level metadata ( sssomMetadata ) gets converted into OWLAnnotation objects which are materialised as axiom annotations on the mapping annotation assertion, see OWL 2 Structural Specification : AnnotationAssertion(sssomMetadata P, S, O) Where sssomMetadata is a sequence of OWL Annotations objects like: Annotation(Q1,V1) Annotation(Q2,V2) ... Annotation(Qn,Vn) where Qi is a SSSOM metadata element and Vi is an annotation value. Note that if a SSSOM metadata element value is a list L (i.e. can have multiple elements, such as creator and others), individual annotations are created for each of them: Annotation(Q,V) for all V in L. Example: AnnotationAssertion(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) skos:exactMatch <http://purl.obolibrary.org/obo/HP_0009894> <http://purl.obolibrary.org/obo/MP_0000019>) Mapping set level annotations are manifested as Ontology annotation in the usual way, according to the OWL 2 Structural Specification . Predicate is an object property Case 1: Object and Subject are classes. The Mapping gets translated into an existential restriction: SubclassOf(A, P some O) All metadata elements are added as OWLAnnotation objects and added to SubclassOf axiom as axiom annotations: SubclassOf(sssomMetadata, A, P some O) Example: SubClassOf(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) <http://example.org/AA> ObjectSomeValuesFrom(<http://example.org/x> <http://example.org/BB>)) Case 2: Object and Subject are individuals The Mapping gets translated into an object property assertion: ObjectPropertyAssertion(P, A, O) All metadata elements are added as OWLAnnotation objects and added to ObjectPropertyAssertion axiom as axiom annotations: ObjectPropertyAssertion(sssomMetadata, P, A, O) Example: ObjectPropertyAssertion(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) <http://www.example.org/x> <http://www.example.org/a> <http://www.example.org/b>) Predicate is language relational construct of RDFS or OWL The mapping gets translated into an annotated axiom that corresponds to the construct used. By default, SSSOM will support: owl:EquivalentClass EquivalentClass(sssomMetadata,A,O) rdfs:subClassOf SubClassOf(sssomMetadata, A,O) Example: SubClassOf(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) <http://www.example.org/a> <http://www.example.org/b>) TSV: All SSSOM metadata elements labelled with L in the metadata table are permissible as column names in the TSV. List elements (such as creator) are \"|\"-separated. The columns MUST be sorted according to the order as they appear in the SSSOM metadata . For example, the first columns of a mapping set TSV should always be, in that order: subject_id, predicate_id, object_id, match_type, if labels are not included; if they are included, the order should be: subject_id, subject_label, predicate_id, predicate_label, object_id, object_label, match_type. For easier review of diffs, for example git diff or unix diff, we recommend to serialise the TSV by a fixed row order, sorted column by column from left to right. Metadata about a set of mappings can be supplied as part of the mappings (embedded mode) and as a simple yaml file alongside the primary mapping file. Note that for the TSV, it will be required to supply a valid curie map that allows the unambiguous interpretation of CURIEs. A curie map is supplied after a curie_map: parameter in the yaml file. The value can be either a dictionary of CURIE->URLPREFIX pairs or a link to a valid curie map of the same shape. Note that only metadata elements permissible in a global context (G, or L/G) can be used in the metadata-file. We recommend to use the following filename conventions for SSSOM metadatafiles: TSV files should have the extension .sssom.tsv , for example: mp-hp-exact-0.0.1.sssom.tsv . External yaml metadata files should have the extension .sssom.yml , for example mp-hp-exact-0.0.1.sssom.tsv Example ( download ): creator_id: \"https://orcid.org/0000-0002-7356-1779\" curie_map: HP: \"http://purl.obolibrary.org/obo/HP_\" MP: \"http://purl.obolibrary.org/obo/MP_\" skos: \"http://www.w3.org/2004/02/skos/core\" license: \"https://creativecommons.org/publicdomain/zero/1.0/\" mapping_provider: \"http://purl.obolibrary.org/obo/upheno.owl\" External mode In external mode, the mapping set metadata is supplied by a separate YAML file having the same base-name of the mapping file, with the extension -meta.yml . By default, tools will look for the file of that name in the same directory as the the mapping set table. Example ( download ): subject_id predicate_id object_id match_type subject_label object_label HP:0009124 skos:exactMatch MP:0000003 Lexical Abnormal adipose tissue morphology abnormal adipose tissue morphology HP:0008551 skos:exactMatch MP:0000018 Lexical Microtia small ears HP:0000411 skos:exactMatch MP:0000021 Lexical Protruding ear prominent ears Embedded mode (default) In the embedded mode, we allow the integration of mapping set level metadata as commented YAML . Apart from being commented, the YAML follows the exact same spec as the YAML specified by the external mode . Heavily used tools in bioinformatics such as pandas allow to specify comment characters when reading CSV files, which makes this option the most user friendly for this community. Additionally, it is a simple unix-level or language-level operation to filter these as a pre-processing in a robust fashion. Note: the mapping set level metadata must be included as a continuous block at the beginning of the file . This means in particular: - No comments can be included that are not part of the metadata data. For example, this is not allowed: Illegal case 1: #creator_id: \"https://orcid.org/0000-0002-7356-1779\" # This is a comment that does not belong here #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" Illegal case 2: # This is a comment that does not belong here #creator_id: \"https://orcid.org/0000-0002-7356-1779\" #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" There should be no empty rows: the commented yaml files must be directly followed by the column headers. For example, this is not allowed: Illegal case 3: #creator_id: \"https://orcid.org/0000-0002-7356-1779\" #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" The can be only a single # in the beginning of each row, followed immediately by the yaml. When the leading hash-symbol is stripped from the header block, the resulting string is: a valid yaml file conforms to SSSOM mapping set specification (only curie_map or a metadata elements that are allowed on mapping_set level, i.e. global ). After the table header, no further row should be commented out. Example ( download ): #creator_id: \"https://orcid.org/0000-0002-7356-1779\" #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" # skos: \"http://www.w3.org/2004/02/skos/core\" #license: \"https://creativecommons.org/publicdomain/zero/1.0/\" #mapping_provider: \"http://purl.obolibrary.org/obo/upheno.owl\" subject_id predicate_id object_id match_type subject_label object_label HP:0009124 skos:exactMatch MP:0000003 Lexical Abnormal adipose tissue morphology abnormal adipose tissue morphology HP:0008551 skos:exactMatch MP:0000018 Lexical Microtia small ears HP:0000411 skos:exactMatch MP:0000021 Lexical Protruding ear prominent ears Notes: ROBOT implementation: https://github.com/ontodev/robot/issues/312 JSON: JSON translation is fully managed by LinkML dumper classes . Use Cases: Consumers: OxO Analysis in R/Python using dataframes/pandas Visual inspection by curators to spot-check errors Machine Learning (e.g. predict predicate based on SSSOM columns) Maintainers: Maintain mappings in google sheets Is the format optimized for google refine? Maintain mappings in github/tsvs Rendering Drive-by PRs Providers Autogenerate pages like http://geneontology.org/docs/download-mappings/ http://uberon.github.io/downloads.html#bridge OxO The SSSOM 5-Star System For Mappings Current mappings are extremely hard to use for data integration, because they are: non-transparently imprecise : we do not know whether they are between equivalent terms, or wether one term is broader than the other. non-transparently incomplete : we do not know whether the absence of a mapping means there is none. inaccurate : there are many mappings generated by automated tools that have a low mapping confidence - but still included in mapping sets. unFAIR : there is insufficient metadata attached to mappings and mapping sets to trace their provenance, attribute trust or combine them to exploit cross-walks. In principle, to reach full integration through mappings, you will have to cross-map all ontologies, or semantic spaces (e.g. controlled vocabularies, semantic databases), which means if you have N \"spaces\", you have N x (N - 1) mappings (because A -> B is often different from B -> A). It makes sense to consider mappings as a directed graph from which you can infer other mappings using graph walking or graph traversals . To mitigate the explosion of mappings, we have to be able to cross-walk. While some typical mapping predicates such as owl:equivalentClass or skos:exactMatch are symetric (which means that if A -> B then you can infer B -> A, which we will call a \"walk-back\"), other are not (skos:narrowMatch), but maybe have inverse predicates (A --[skos:narrowMatch]--> B implies B --[skos:broadMatch]--> A). Apart from walk backs, you can infer additional mappings through a chain of subsequent mappings (multi-hop forward walks), for example: - multi-hop forward walks { PR:000050277 -> ncbiprotein:YP_009725304, ncbiprotein:YP_009725304-> uniprot.chain:PRO_0000449627 } --> {PR:000050277 -> uniprot.chain:PRO_0000449627} ) - walk-backs { PR:000050277 -> ncbiprotein:YP_009725304 } --> {ncbiprotein:YP_009725304 -> PR:000050277} - combinations { PR:000050277 -> ncbiprotein:YP_009725304, ncbiprotein:YP_009725304-> uniprot.chain:PRO_0000449627, MY:NSP8-> uniprot.chain:PRO_0000449627 } --> { PR:000050277 -> MY:NSP8 } To enable cross-walking, we propose the following Five-Star system for mapping sets. 1-Star mappings fulfill the following criteria: record subject id, object id and mapping precision (exact, broad, narrow, close, related) using qualified names (either URIs or CURIEs + curie maps) for subject id and object id using a standard file format (JSON, XML, CSV, TSV) made available in a public space optional : record the subject and object labels to make it easier for humans to read the file 2-Star mappings fulfill all the criteria for 1-star mappings and furthermore made available in a public version control system with an issue tracker record the semantic predicate explicitly and using qualified names for the semantic predicate (i.e. owl:equivalentClass, skos:exactMatch) record a confidence value for the mapping between 0 and 1 (0 no confidence, 1 100% confidence). record an open license for the use of the mapping set 3-Star mappings fulfill all the criteria for 2-star mappings and furthermore are exported in SSSOM format record the following additional metadata: match_type (s) (Lexical, Logical match, HumanCurated etc) date of the mapping creator_id subject_source object_source subject_source_version object_source_version mapping_tool if the mapping was automatically computed using a tool 4-Star mappings fulfill all the criteria for 3-star mappings and furthermore register the mapping at a mapping commons record the following additional metadata: mapping_set_id mapping_set_description mapping_set_version mapping_provider (if the mapping is not original, i.e. it is not derived from another source) provide a completely executable curation_rule: if the mapping is Lexical , provide: subject_preprocessing , object_preprocessing subject_match_field , object_match_field match_string if the mapping is Logical , the mapping should be derivable by a reasoner from a combination of the object_source and subject_source . If more is needed then please leave a comment with details. if the mapping is HumanCurated .. (this needs to be fleshed out . For now, leave a comment indicating what you did to arrive at your conclusion, i.e. wether you compared the definitions, looked up the \"labels\" in a database, ran a tool and decided to trust it etc.) if the mapping is SemanticSimilarity (graph similarity, neighbourhood, cosine similarity), you should provide: semantic_similarity_score semantic_similarity_measure For now, if there are multiple pieces of evidence (lexical, logical etc), please emit one row per evidence. If your tool combines multiple pieces of evidence in a complex way, emit yet another row at the end with match_type Complex and emit ensure you provide the mapping_tool . 5-Star mappings fulfill all the criteria for 4-star mappings and furthermore Are up-to-date with the subject_source and object_source Have no issue on their issue tracker open for more than 3 months without an interaction Use a standard open license, such as CC Zero 1.0 or CC-BY-4.0 .","title":"SSSOM Specification"},{"location":"spec/#simple-standard-for-sharing-ontology-mappings-sssom","text":"Development Draft (under construction: some metadata fields may be subject to change) Editors: Nicolas Matentzoglu (Semanticly Ltd; @matentzn ) Chris Mungall (LBL) Ernesto Jimenez-Ruiz (City, University of London) John Graybeal (Stanford) William Duncan (LBL) David Osumi-Sutherland (EMBL-EBI) Simon Jupp (SciBite) James McLaughlin (EMBL-EBI) Henriette Harmse (EMBL-EBI) Tiffany Callahan ( @callahantiff ) Charlie Hoyt (Harvard Medical School; @cthoyt ) Thomas Liener (Pistoia Alliance) Harshad Hegde (LBL) Contributors: Alasdair Gray Alex Wagner Amelia L. Hoyt Andrew Williams Anne Thessen Benjamin M. Gyori Bill Baumgartner Christopher Chute Chris T. Evelo Damion Dooley Davera Gabriel Harold Solbrig HyeongSik Kim Ian Harrow James Malone James Overton James P. Balhoff James Stevenson Jiao Dahzi Joe Flack Jooho Lee Julie McMurry Kori Kuzma Kristin Kostka Lauren Chan Melissa Haendel Monica Munoz-Torres Nicole Vasilevsky Nomi Harris N\u00faria Queralt-Rosinach Sabrina Toro Sebastian Koehler Shahim Essaid Sierra Moxon Sue Bello Tim Putman Quick links : SSSOM on Wikidata SSSOM Python toolkit on Wikidata SSSOM Python toolkit: Official Documentation Presentations","title":"Simple Standard for Sharing Ontology Mappings (SSSOM)"},{"location":"spec/#abstract","text":"Mappings, or cross-references, are used to link terms across different ontologies. However, there is currently little to no standardisation in how such mappings are represented. While properties such as hasDbXref property are widely used in ontologies such as GO and MONDO, the meaning of such mappings is unclear, and cannot be further described with additional metadata or provenance. The Simple Standard for Sharing Ontology Mappings (SSSOM) is an initiative to provide a minimal and standard set of elements for the dissemination of mappings between ontology terms, to ensure a reliable interpretation of generated mappings and to enable sharing and data integration between people and applications. This document introduces the SSSOM catalog of metadata elements, which can be used to attach meta- and provenance data to both mappings and sets of mappings; a controlled vocabulary for the description of match types (SSSOM CV); a definition of both RDF and TSV serialisations of ontology mappings; and a (non-exhaustive) selection of recommended mapping predicates.","title":"Abstract"},{"location":"spec/#table-of-contents","text":"Introduction SSSOM Metadata Elements SSSOM Common Predicates SSSOM Serialisation SSSOM Use Cases SSSOM 5-Star recommendation for mappings","title":"Table of Contents"},{"location":"spec/#introduction","text":"Currently, there are three methods typically used to express mappings in OWL: direct logical axioms using owl:equivalentClass; the oboInOwl hasDbXref property; and the SKOS vocabulary for mapping properties. The first, owl:equivalentClass, is a strong logical equivalence assertion which is not appropriate for more nuanced mappings such as close matches. The second, hasDbXref, does not assert formal logical equivalence but also has no clearly defined meaning. Finally, the SKOS vocabulary provides a hierarchy of mapping properties which allow the unambigous specification of exact, close, broad, and narrow matches, but does not provide the means for mappings to be annotated with additional metadata such as confidence scores and provenance. The Simple Standard for Sharing Ontology Mappings (SSSOM) addresses these problems by defining a catalog of metadata terms to describe mappings. Both individual mappings and sets of mappings can be described, enabling provenance and metadata to be captured on multiple levels. SSSOM interoperates with existing methods for the specification of mappings, allowing any predicate to be used to describe the nature of each mapping including those from OWL and SKOS. The provenance of mappings - such as whether the mapping was created as the result of a human-curated equivalence match, or a semantic similarity match - is specified using a controlled vocabulary (CV), SSSOM CV. Combined with the metadata properties provided by SSSOM such as confidence and semantic_similarity_score, this provenance information can be used to capture mapping descriptions in a manner that is explicit and amenable to curation. Two serialisations for SSSOM mappings are provided in this document, aimed at different communities: an RDF/OWL serialisation using IRIs that is aimed at the Knowledge Graph/Semantic Web community, and a TSV serialisation using CURIE syntax which is aimed at the wider bioinformatics community. An unambiguous translation between these serialisations is provided.","title":"Introduction"},{"location":"spec/#some-notes-on-the-standardisation-process","text":"Note this is a public copy of the editors\u2019 draft. It is provided for discussion only and may change at any moment. Do not cite this document other than as work in progress. SSSOM is community-driven, so all feedback is welcome.","title":"Some notes on the standardisation process:"},{"location":"spec/#sssom-metadata-elements","text":"The SSSOM specification defines a set of SSSOM metadata elements that are used to describe mappings. Apart from the elements themselves, some example usage and a description, the SSSOM spec defines the canonical order for the metadatdata in which the elements should appear when serialised. This precludes spurious diffs in a git setting, which is an important concern for the continuous reviewing of mappings by curators and users. A \"term\" is defined in a controlled vocabulary / ontology, and usually corresponds to a class, an individual or a property (entity in OWL, concept in SKOS, resource in RDF). The \"subject\" is the term on the left side of the mapping, and the \"object\" is the term on the right side of the mapping. A \"predicate\" relates the subject with the object and is typically an annotation or object property. A \"mapping set\" is a set of mappings that can be shared using the SSSOM standard. The conceptual model of SSSOM has two main elements: a Mapping and a MappingSet . Some SSSOM metadata elements apply only to one element or the other, but many can be applied to both. Note that some SSSOM metadata elements have known equivalent properties which will be used in the RDF serialisation, for example see_also is mapped to rdfs:seeAlso . All metadata elements and their mappings are declared and managed in the SSSOM schema .","title":"SSSOM Metadata Elements"},{"location":"spec/#metadata-elements","text":"The latest version of the metadata elements are: Mapping MappingSet","title":"Metadata Elements"},{"location":"spec/#common-mapping-predicates","text":"The use of predicates is not restricted by SSSOM, but for maximum re-use, the following predicates are strongly encouraged. Sources: https://www.bioontology.org/wiki/BioPortal_Mappings Predicate Description owl:sameAs The subject and the object are instances (owl individuals), and the two instances are the same. owl:equivalentClass The subject and the object are classes (owl class), and the two classes are the same. owl:equivalentProperty The subject and the object are properties (owl object, data, annotation properties), and the two properties are the same. rdfs:subClassOf The subject and the object are classes (owl class), and the subject is a subclass of the object. rdfs:subPropertyOf The subject and the object are properties (owl object, data, annotation properties), and the subject is a subproperty of the object. skos:relatedMatch The subject and the object are associated in some unspecified way. skos:closeMatch The subject and the object are sufficiently similar that they can be used interchangeably in some information retrieval applications. skos:exactMatch The subject and the object can, with a high degree of confidence, be used interchangeably across a wide range of information retrieval applications. skos:narrowMatch From the SKOS primer: A triple skos:narrower (and skos:narrowMatch) asserts that , the object of the triple, is a narrower concept than , the subject of the triple. skos:broadMatch From the SKOS primer: A triple skos:broader (and skos:broadMatch) asserts that , the object of the triple, is a broader concept than , the subject of the triple. oio:database_cross_reference Two terms are related in some way. The meaning is frequently consistent across a single set of mappings. Note this property is often overloaded even where the terms are of a different nature (e.g. interpro2go) rdfs:seeAlso The subject and the object are associated in some unspecified way. The object IRI often resolves to a resource on the web that provides additional information. RO:? Any Relation in the Relation Ontology (RO).","title":"Common Mapping Predicates"},{"location":"spec/#serialisation","text":"","title":"Serialisation"},{"location":"spec/#rdfxml-serialised-re-ified-owl-axioms","text":"The default RDFXML serialisation of the mappings will be realised as reified OWL axioms . This has the advantage that any mapping set can be simply merged with an ontology in the usual way, for example using ROBOT merge . We will deal with three types of reified OWL-axioms, and a few sub-types: Predicate is an annotation property Predicate is an object property and Object/Subject are classes Object/Subject are individuals Predicate is language relational construct of RDFS or OWL (rdfs:subClassOf, owl:equivalentClass)","title":"RDF/XML serialised re-ified OWL axioms:"},{"location":"spec/#predicate-is-an-annotation-property","text":"If the predicate corresponds to an annotation property, the mapping gets converted to an OWLAnnotationAssertion axiom: OWLAnnotationAssertion(P,S,O) . All mapping level metadata ( sssomMetadata ) gets converted into OWLAnnotation objects which are materialised as axiom annotations on the mapping annotation assertion, see OWL 2 Structural Specification : AnnotationAssertion(sssomMetadata P, S, O) Where sssomMetadata is a sequence of OWL Annotations objects like: Annotation(Q1,V1) Annotation(Q2,V2) ... Annotation(Qn,Vn) where Qi is a SSSOM metadata element and Vi is an annotation value. Note that if a SSSOM metadata element value is a list L (i.e. can have multiple elements, such as creator and others), individual annotations are created for each of them: Annotation(Q,V) for all V in L. Example: AnnotationAssertion(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) skos:exactMatch <http://purl.obolibrary.org/obo/HP_0009894> <http://purl.obolibrary.org/obo/MP_0000019>) Mapping set level annotations are manifested as Ontology annotation in the usual way, according to the OWL 2 Structural Specification .","title":"Predicate is an annotation property:"},{"location":"spec/#predicate-is-an-object-property","text":"","title":"Predicate is an object property"},{"location":"spec/#case-1-object-and-subject-are-classes","text":"The Mapping gets translated into an existential restriction: SubclassOf(A, P some O) All metadata elements are added as OWLAnnotation objects and added to SubclassOf axiom as axiom annotations: SubclassOf(sssomMetadata, A, P some O) Example: SubClassOf(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) <http://example.org/AA> ObjectSomeValuesFrom(<http://example.org/x> <http://example.org/BB>))","title":"Case 1: Object and Subject are classes."},{"location":"spec/#case-2-object-and-subject-are-individuals","text":"The Mapping gets translated into an object property assertion: ObjectPropertyAssertion(P, A, O) All metadata elements are added as OWLAnnotation objects and added to ObjectPropertyAssertion axiom as axiom annotations: ObjectPropertyAssertion(sssomMetadata, P, A, O) Example: ObjectPropertyAssertion(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) <http://www.example.org/x> <http://www.example.org/a> <http://www.example.org/b>)","title":"Case 2: Object and Subject are individuals"},{"location":"spec/#predicate-is-language-relational-construct-of-rdfs-or-owl","text":"The mapping gets translated into an annotated axiom that corresponds to the construct used. By default, SSSOM will support: owl:EquivalentClass EquivalentClass(sssomMetadata,A,O) rdfs:subClassOf SubClassOf(sssomMetadata, A,O) Example: SubClassOf(Annotation(sssom:creator_id <https://orcid.org/0000-0002-7356-1779>) Annotation(sssom:match_type sssom:LexicalEquivalenceMapping) <http://www.example.org/a> <http://www.example.org/b>)","title":"Predicate is language relational construct of RDFS or OWL"},{"location":"spec/#tsv","text":"All SSSOM metadata elements labelled with L in the metadata table are permissible as column names in the TSV. List elements (such as creator) are \"|\"-separated. The columns MUST be sorted according to the order as they appear in the SSSOM metadata . For example, the first columns of a mapping set TSV should always be, in that order: subject_id, predicate_id, object_id, match_type, if labels are not included; if they are included, the order should be: subject_id, subject_label, predicate_id, predicate_label, object_id, object_label, match_type. For easier review of diffs, for example git diff or unix diff, we recommend to serialise the TSV by a fixed row order, sorted column by column from left to right. Metadata about a set of mappings can be supplied as part of the mappings (embedded mode) and as a simple yaml file alongside the primary mapping file. Note that for the TSV, it will be required to supply a valid curie map that allows the unambiguous interpretation of CURIEs. A curie map is supplied after a curie_map: parameter in the yaml file. The value can be either a dictionary of CURIE->URLPREFIX pairs or a link to a valid curie map of the same shape. Note that only metadata elements permissible in a global context (G, or L/G) can be used in the metadata-file. We recommend to use the following filename conventions for SSSOM metadatafiles: TSV files should have the extension .sssom.tsv , for example: mp-hp-exact-0.0.1.sssom.tsv . External yaml metadata files should have the extension .sssom.yml , for example mp-hp-exact-0.0.1.sssom.tsv Example ( download ): creator_id: \"https://orcid.org/0000-0002-7356-1779\" curie_map: HP: \"http://purl.obolibrary.org/obo/HP_\" MP: \"http://purl.obolibrary.org/obo/MP_\" skos: \"http://www.w3.org/2004/02/skos/core\" license: \"https://creativecommons.org/publicdomain/zero/1.0/\" mapping_provider: \"http://purl.obolibrary.org/obo/upheno.owl\"","title":"TSV:"},{"location":"spec/#external-mode","text":"In external mode, the mapping set metadata is supplied by a separate YAML file having the same base-name of the mapping file, with the extension -meta.yml . By default, tools will look for the file of that name in the same directory as the the mapping set table. Example ( download ): subject_id predicate_id object_id match_type subject_label object_label HP:0009124 skos:exactMatch MP:0000003 Lexical Abnormal adipose tissue morphology abnormal adipose tissue morphology HP:0008551 skos:exactMatch MP:0000018 Lexical Microtia small ears HP:0000411 skos:exactMatch MP:0000021 Lexical Protruding ear prominent ears","title":"External mode"},{"location":"spec/#embedded-mode-default","text":"In the embedded mode, we allow the integration of mapping set level metadata as commented YAML . Apart from being commented, the YAML follows the exact same spec as the YAML specified by the external mode . Heavily used tools in bioinformatics such as pandas allow to specify comment characters when reading CSV files, which makes this option the most user friendly for this community. Additionally, it is a simple unix-level or language-level operation to filter these as a pre-processing in a robust fashion. Note: the mapping set level metadata must be included as a continuous block at the beginning of the file . This means in particular: - No comments can be included that are not part of the metadata data. For example, this is not allowed: Illegal case 1: #creator_id: \"https://orcid.org/0000-0002-7356-1779\" # This is a comment that does not belong here #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" Illegal case 2: # This is a comment that does not belong here #creator_id: \"https://orcid.org/0000-0002-7356-1779\" #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" There should be no empty rows: the commented yaml files must be directly followed by the column headers. For example, this is not allowed: Illegal case 3: #creator_id: \"https://orcid.org/0000-0002-7356-1779\" #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" The can be only a single # in the beginning of each row, followed immediately by the yaml. When the leading hash-symbol is stripped from the header block, the resulting string is: a valid yaml file conforms to SSSOM mapping set specification (only curie_map or a metadata elements that are allowed on mapping_set level, i.e. global ). After the table header, no further row should be commented out. Example ( download ): #creator_id: \"https://orcid.org/0000-0002-7356-1779\" #curie_map: # HP: \"http://purl.obolibrary.org/obo/HP_\" # MP: \"http://purl.obolibrary.org/obo/MP_\" # skos: \"http://www.w3.org/2004/02/skos/core\" #license: \"https://creativecommons.org/publicdomain/zero/1.0/\" #mapping_provider: \"http://purl.obolibrary.org/obo/upheno.owl\" subject_id predicate_id object_id match_type subject_label object_label HP:0009124 skos:exactMatch MP:0000003 Lexical Abnormal adipose tissue morphology abnormal adipose tissue morphology HP:0008551 skos:exactMatch MP:0000018 Lexical Microtia small ears HP:0000411 skos:exactMatch MP:0000021 Lexical Protruding ear prominent ears Notes: ROBOT implementation: https://github.com/ontodev/robot/issues/312","title":"Embedded mode (default)"},{"location":"spec/#json","text":"JSON translation is fully managed by LinkML dumper classes .","title":"JSON:"},{"location":"spec/#use-cases","text":"Consumers: OxO Analysis in R/Python using dataframes/pandas Visual inspection by curators to spot-check errors Machine Learning (e.g. predict predicate based on SSSOM columns) Maintainers: Maintain mappings in google sheets Is the format optimized for google refine? Maintain mappings in github/tsvs Rendering Drive-by PRs Providers Autogenerate pages like http://geneontology.org/docs/download-mappings/ http://uberon.github.io/downloads.html#bridge OxO","title":"Use Cases:"},{"location":"spec/#the-sssom-5-star-system-for-mappings","text":"Current mappings are extremely hard to use for data integration, because they are: non-transparently imprecise : we do not know whether they are between equivalent terms, or wether one term is broader than the other. non-transparently incomplete : we do not know whether the absence of a mapping means there is none. inaccurate : there are many mappings generated by automated tools that have a low mapping confidence - but still included in mapping sets. unFAIR : there is insufficient metadata attached to mappings and mapping sets to trace their provenance, attribute trust or combine them to exploit cross-walks. In principle, to reach full integration through mappings, you will have to cross-map all ontologies, or semantic spaces (e.g. controlled vocabularies, semantic databases), which means if you have N \"spaces\", you have N x (N - 1) mappings (because A -> B is often different from B -> A). It makes sense to consider mappings as a directed graph from which you can infer other mappings using graph walking or graph traversals . To mitigate the explosion of mappings, we have to be able to cross-walk. While some typical mapping predicates such as owl:equivalentClass or skos:exactMatch are symetric (which means that if A -> B then you can infer B -> A, which we will call a \"walk-back\"), other are not (skos:narrowMatch), but maybe have inverse predicates (A --[skos:narrowMatch]--> B implies B --[skos:broadMatch]--> A). Apart from walk backs, you can infer additional mappings through a chain of subsequent mappings (multi-hop forward walks), for example: - multi-hop forward walks { PR:000050277 -> ncbiprotein:YP_009725304, ncbiprotein:YP_009725304-> uniprot.chain:PRO_0000449627 } --> {PR:000050277 -> uniprot.chain:PRO_0000449627} ) - walk-backs { PR:000050277 -> ncbiprotein:YP_009725304 } --> {ncbiprotein:YP_009725304 -> PR:000050277} - combinations { PR:000050277 -> ncbiprotein:YP_009725304, ncbiprotein:YP_009725304-> uniprot.chain:PRO_0000449627, MY:NSP8-> uniprot.chain:PRO_0000449627 } --> { PR:000050277 -> MY:NSP8 } To enable cross-walking, we propose the following Five-Star system for mapping sets. 1-Star mappings fulfill the following criteria: record subject id, object id and mapping precision (exact, broad, narrow, close, related) using qualified names (either URIs or CURIEs + curie maps) for subject id and object id using a standard file format (JSON, XML, CSV, TSV) made available in a public space optional : record the subject and object labels to make it easier for humans to read the file 2-Star mappings fulfill all the criteria for 1-star mappings and furthermore made available in a public version control system with an issue tracker record the semantic predicate explicitly and using qualified names for the semantic predicate (i.e. owl:equivalentClass, skos:exactMatch) record a confidence value for the mapping between 0 and 1 (0 no confidence, 1 100% confidence). record an open license for the use of the mapping set 3-Star mappings fulfill all the criteria for 2-star mappings and furthermore are exported in SSSOM format record the following additional metadata: match_type (s) (Lexical, Logical match, HumanCurated etc) date of the mapping creator_id subject_source object_source subject_source_version object_source_version mapping_tool if the mapping was automatically computed using a tool 4-Star mappings fulfill all the criteria for 3-star mappings and furthermore register the mapping at a mapping commons record the following additional metadata: mapping_set_id mapping_set_description mapping_set_version mapping_provider (if the mapping is not original, i.e. it is not derived from another source) provide a completely executable curation_rule: if the mapping is Lexical , provide: subject_preprocessing , object_preprocessing subject_match_field , object_match_field match_string if the mapping is Logical , the mapping should be derivable by a reasoner from a combination of the object_source and subject_source . If more is needed then please leave a comment with details. if the mapping is HumanCurated .. (this needs to be fleshed out . For now, leave a comment indicating what you did to arrive at your conclusion, i.e. wether you compared the definitions, looked up the \"labels\" in a database, ran a tool and decided to trust it etc.) if the mapping is SemanticSimilarity (graph similarity, neighbourhood, cosine similarity), you should provide: semantic_similarity_score semantic_similarity_measure For now, if there are multiple pieces of evidence (lexical, logical etc), please emit one row per evidence. If your tool combines multiple pieces of evidence in a complex way, emit yet another row at the end with match_type Complex and emit ensure you provide the mapping_tool . 5-Star mappings fulfill all the criteria for 4-star mappings and furthermore Are up-to-date with the subject_source and object_source Have no issue on their issue tracker open for more than 3 months without an interaction Use a standard open license, such as CC Zero 1.0 or CC-BY-4.0 .","title":"The SSSOM 5-Star System For Mappings"},{"location":"subject_category/","text":"Slot: subject_category The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. URI: sssom:subject_category Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='UBERON:0001062', description='(The CURIE of the Uberon term for \"anatomical entity\".)') Example(value='biolink:Gene', description='(The CURIE of the biolink class for genes.)')","title":"Slot: subject_category"},{"location":"subject_category/#slot-subject_category","text":"The conceptual category to which the subject belongs to. This can be a string denoting the category or a term from a controlled vocabulary. URI: sssom:subject_category","title":"Slot: subject_category"},{"location":"subject_category/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"subject_category/#parents","text":"","title":"Parents"},{"location":"subject_category/#children","text":"","title":"Children"},{"location":"subject_category/#used-by","text":"Mapping","title":"Used by"},{"location":"subject_category/#other-properties","text":"Examples: Example(value='UBERON:0001062', description='(The CURIE of the Uberon term for \"anatomical entity\".)') Example(value='biolink:Gene', description='(The CURIE of the biolink class for genes.)')","title":"Other properties"},{"location":"subject_id/","text":"Slot: subject_id The ID of the subject of the mapping. URI: sssom:subject_id Domain and Range None \u2192 1..1 EntityReference Parents Children Used by Mapping Other properties Mappings: owl:annotatedSource owl:annotatedSource Examples: Example(value='HP:0009894', description=\"The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears'\")","title":"Slot: subject_id"},{"location":"subject_id/#slot-subject_id","text":"The ID of the subject of the mapping. URI: sssom:subject_id","title":"Slot: subject_id"},{"location":"subject_id/#domain-and-range","text":"None \u2192 1..1 EntityReference","title":"Domain and Range"},{"location":"subject_id/#parents","text":"","title":"Parents"},{"location":"subject_id/#children","text":"","title":"Children"},{"location":"subject_id/#used-by","text":"Mapping","title":"Used by"},{"location":"subject_id/#other-properties","text":"Mappings: owl:annotatedSource owl:annotatedSource Examples: Example(value='HP:0009894', description=\"The CURIE denoting the Human Phenotype Ontology concept of 'Thickened ears'\")","title":"Other properties"},{"location":"subject_label/","text":"Slot: subject_label The label of subject of the mapping URI: sssom:subject_label Domain and Range None \u2192 0..1 String Parents Children Used by Mapping Other properties Examples: Example(value='Thickened ears', description=None)","title":"Slot: subject_label"},{"location":"subject_label/#slot-subject_label","text":"The label of subject of the mapping URI: sssom:subject_label","title":"Slot: subject_label"},{"location":"subject_label/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"subject_label/#parents","text":"","title":"Parents"},{"location":"subject_label/#children","text":"","title":"Children"},{"location":"subject_label/#used-by","text":"Mapping","title":"Used by"},{"location":"subject_label/#other-properties","text":"Examples: Example(value='Thickened ears', description=None)","title":"Other properties"},{"location":"subject_match_field/","text":"Slot: subject_match_field A tuple of fields (term annotations on the subject) that was used for the match. URI: sssom:subject_match_field Domain and Range None \u2192 0..* EntityReference Parents Children Used by Mapping MappingSet","title":"Slot: subject_match_field"},{"location":"subject_match_field/#slot-subject_match_field","text":"A tuple of fields (term annotations on the subject) that was used for the match. URI: sssom:subject_match_field","title":"Slot: subject_match_field"},{"location":"subject_match_field/#domain-and-range","text":"None \u2192 0..* EntityReference","title":"Domain and Range"},{"location":"subject_match_field/#parents","text":"","title":"Parents"},{"location":"subject_match_field/#children","text":"","title":"Children"},{"location":"subject_match_field/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"subject_preprocessing/","text":"Slot: subject_preprocessing Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. URI: sssom:subject_preprocessing Domain and Range None \u2192 0..* preprocessing_method_enum Parents Children Used by Mapping MappingSet","title":"Slot: subject_preprocessing"},{"location":"subject_preprocessing/#slot-subject_preprocessing","text":"Method of preprocessing applied to the fields of the subject. If different preprocessing steps were performed on different fields, it is recommended to store the match in separate rows. URI: sssom:subject_preprocessing","title":"Slot: subject_preprocessing"},{"location":"subject_preprocessing/#domain-and-range","text":"None \u2192 0..* preprocessing_method_enum","title":"Domain and Range"},{"location":"subject_preprocessing/#parents","text":"","title":"Parents"},{"location":"subject_preprocessing/#children","text":"","title":"Children"},{"location":"subject_preprocessing/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"subject_source/","text":"Slot: subject_source URI of ontology source for the subject. URI: sssom:subject_source Domain and Range None \u2192 0..1 Uri Parents Children Used by Mapping MappingSet Other properties Examples: Example(value='http://purl.obolibrary.org/obo/mondo.owl', description='(A persistent IRI pointing to the latest version of the Mondo ontology.)')","title":"Slot: subject_source"},{"location":"subject_source/#slot-subject_source","text":"URI of ontology source for the subject. URI: sssom:subject_source","title":"Slot: subject_source"},{"location":"subject_source/#domain-and-range","text":"None \u2192 0..1 Uri","title":"Domain and Range"},{"location":"subject_source/#parents","text":"","title":"Parents"},{"location":"subject_source/#children","text":"","title":"Children"},{"location":"subject_source/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"subject_source/#other-properties","text":"Examples: Example(value='http://purl.obolibrary.org/obo/mondo.owl', description='(A persistent IRI pointing to the latest version of the Mondo ontology.)')","title":"Other properties"},{"location":"subject_source_version/","text":"Slot: subject_source_version Version IRI or version string of the source of the subject term. URI: sssom:subject_source_version Domain and Range None \u2192 0..1 String Parents Children Used by Mapping MappingSet Other properties Examples: Example(value='http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl', description=\"(A persistent Version IRI pointing to the Mondo version '2021-01-30')\")","title":"Slot: subject_source_version"},{"location":"subject_source_version/#slot-subject_source_version","text":"Version IRI or version string of the source of the subject term. URI: sssom:subject_source_version","title":"Slot: subject_source_version"},{"location":"subject_source_version/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"subject_source_version/#parents","text":"","title":"Parents"},{"location":"subject_source_version/#children","text":"","title":"Children"},{"location":"subject_source_version/#used-by","text":"Mapping MappingSet","title":"Used by"},{"location":"subject_source_version/#other-properties","text":"Examples: Example(value='http://purl.obolibrary.org/obo/mondo/releases/2021-01-30/mondo.owl', description=\"(A persistent Version IRI pointing to the Mondo version '2021-01-30')\")","title":"Other properties"},{"location":"tsv_example/","text":"Slot: tsv_example An example value of the a SSSOM element in RDF. URI: sssom:tsv_example Domain and Range None \u2192 0..1 String Parents Children Used by","title":"Slot: tsv_example"},{"location":"tsv_example/#slot-tsv_example","text":"An example value of the a SSSOM element in RDF. URI: sssom:tsv_example","title":"Slot: tsv_example"},{"location":"tsv_example/#domain-and-range","text":"None \u2192 0..1 String","title":"Domain and Range"},{"location":"tsv_example/#parents","text":"","title":"Parents"},{"location":"tsv_example/#children","text":"","title":"Children"},{"location":"tsv_example/#used-by","text":"","title":"Used by"},{"location":"usecases/","text":"Use cases and case studies Mondo disease mappings https://github.com/monarch-initiative/mondo/tree/sssom-rewrite/src/ontology/mappings The National Microbiome Data Collaborative (NMDC, https://microbiomedata.org/): Various data model mappings , e.g. MIXS, GOLD, etc CCDH (mapping clinical data models, ontologies and value sets) https://harmonization.datacommons.cancer.gov/ccdh-resources SNOMED-NCIT example Cross-species mapping efforts mouse-human mapping commons IMPC mappings Microbial traits https://github.com/mapping-commons/microbial-trait-mappings Biomappings https://github.com/biomappings/biomappings/tree/master/docs/_data/sssom Decentralized curation of mappings, especially ones that aren't incident to ontology terms Clinical mappings Gdocs for discussion.","title":"Use cases"},{"location":"usecases/#use-cases-and-case-studies","text":"","title":"Use cases and case studies"},{"location":"usecases/#mondo-disease-mappings","text":"https://github.com/monarch-initiative/mondo/tree/sssom-rewrite/src/ontology/mappings","title":"Mondo disease mappings"},{"location":"usecases/#the-national-microbiome-data-collaborative-nmdc-httpsmicrobiomedataorg","text":"Various data model mappings , e.g. MIXS, GOLD, etc","title":"The National Microbiome Data Collaborative (NMDC, https://microbiomedata.org/):"},{"location":"usecases/#ccdh-mapping-clinical-data-models-ontologies-and-value-sets","text":"https://harmonization.datacommons.cancer.gov/ccdh-resources SNOMED-NCIT example","title":"CCDH (mapping clinical data models, ontologies and value sets)"},{"location":"usecases/#cross-species-mapping-efforts","text":"mouse-human mapping commons IMPC mappings","title":"Cross-species mapping efforts"},{"location":"usecases/#microbial-traits","text":"https://github.com/mapping-commons/microbial-trait-mappings","title":"Microbial traits"},{"location":"usecases/#biomappings","text":"https://github.com/biomappings/biomappings/tree/master/docs/_data/sssom Decentralized curation of mappings, especially ones that aren't incident to ontology terms","title":"Biomappings"},{"location":"usecases/#clinical-mappings","text":"Gdocs for discussion.","title":"Clinical mappings"},{"location":"workshops/","text":"Workshops Mapping Commons Workshop Series Wikidata: https://www.wikidata.org/wiki/Q108394475 1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings","title":"Workshops"},{"location":"workshops/#workshops","text":"","title":"Workshops"},{"location":"workshops/#mapping-commons-workshop-series","text":"Wikidata: https://www.wikidata.org/wiki/Q108394475 1st Mapping Commons Workshop on Simple Standard for Sharing Ontology Mappings","title":"Mapping Commons Workshop Series"}]}